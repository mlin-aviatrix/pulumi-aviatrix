{
    "name": "aviatrix",
    "description": "A Pulumi package for creating and managing aviatrix cloud resources.",
    "keywords": [
        "pulumi",
        "aviatrix",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`aviatrix` Terraform Provider](https://github.com/terraform-providers/terraform-provider-aviatrix).",
    "repository": "https://github.com/mlin-aviatrix/pulumi-aviatrix",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "controllerIp": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean",
                "default": true
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "defaults": [
            "controllerIp",
            "password",
            "username"
        ]
    },
    "types": {
        "aviatrix:index/VpcPrivateSubnet:VpcPrivateSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "name",
                        "subnetId"
                    ]
                }
            }
        },
        "aviatrix:index/VpcPublicSubnet:VpcPublicSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidr",
                        "name",
                        "subnetId"
                    ]
                }
            }
        },
        "aviatrix:index/VpcSubnet:VpcSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "subnetId"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the aviatrix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "controllerIp": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean"
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "required": [
            "controllerIp",
            "password",
            "username"
        ],
        "inputProperties": {
            "controllerIp": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "pathToCaCertificate": {
                "type": "string"
            },
            "skipVersionValidation": {
                "type": "boolean",
                "default": true
            },
            "username": {
                "type": "string"
            },
            "verifySslCertificate": {
                "type": "boolean"
            }
        },
        "requiredInputs": [
            "controllerIp",
            "password",
            "username"
        ]
    },
    "resources": {
        "aviatrix:index/account:Account": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n"
                },
                "alicloudAccessKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Access Key.\n"
                },
                "alicloudAccountId": {
                    "type": "string",
                    "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                },
                "alicloudSecretKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Secret Key.\n"
                },
                "armApplicationId": {
                    "type": "string",
                    "description": "Azure Application ID.\n"
                },
                "armApplicationKey": {
                    "type": "string",
                    "description": "Azure Application Key.\n"
                },
                "armDirectoryId": {
                    "type": "string",
                    "description": "Azure Directory ID.\n"
                },
                "armSubscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "auditAccount": {
                    "type": "boolean",
                    "description": "Enable account audit.\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "AWS Access Key.\n"
                },
                "awsAccountNumber": {
                    "type": "string",
                    "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                },
                "awsCaCertPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region or Secret Region Custom Certificate Authority file path on the controller.\n"
                },
                "awsGatewayRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN for gateways.\n"
                },
                "awsGatewayRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN for gateways.\n"
                },
                "awsIam": {
                    "type": "boolean",
                    "description": "AWS IAM-role based flag.\n"
                },
                "awsRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN.\n"
                },
                "awsRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key.\n"
                },
                "awschinaAccessKey": {
                    "type": "string",
                    "description": "AWS China Access Key.\n"
                },
                "awschinaAccountNumber": {
                    "type": "string",
                    "description": "AWS China Account Number.\n"
                },
                "awschinaIam": {
                    "type": "boolean",
                    "description": "AWS China IAM-role based flag.\n"
                },
                "awschinaRoleApp": {
                    "type": "string",
                    "description": "AWS China App Role ARN.\n"
                },
                "awschinaRoleEc2": {
                    "type": "string",
                    "description": "AWS China EC2 Role ARN.\n"
                },
                "awschinaSecretKey": {
                    "type": "string",
                    "description": "AWS China Secret Key.\n"
                },
                "awsgovAccessKey": {
                    "type": "string",
                    "description": "AWS Gov Access Key.\n"
                },
                "awsgovAccountNumber": {
                    "type": "string",
                    "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                },
                "awsgovIam": {
                    "type": "boolean",
                    "description": "AWSGov IAM-role based flag\n"
                },
                "awsgovRoleApp": {
                    "type": "string",
                    "description": "AWSGov App role ARN\n"
                },
                "awsgovRoleEc2": {
                    "type": "string",
                    "description": "AWSGov EC2 role ARN\n"
                },
                "awsgovSecretKey": {
                    "type": "string",
                    "description": "AWS Gov Secret Key.\n"
                },
                "awssAccountNumber": {
                    "type": "string",
                    "description": "AWS Secret Region Account Number.\n"
                },
                "awssCaChainCert": {
                    "type": "string",
                    "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                },
                "awssCapAccountName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Account Name.\n"
                },
                "awssCapAgency": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Agency.\n"
                },
                "awssCapCert": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path.\n"
                },
                "awssCapCertKey": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path.\n"
                },
                "awssCapCertKeyPath": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path on the controller.\n"
                },
                "awssCapCertPath": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path on the controller.\n"
                },
                "awssCapRoleName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Role Name.\n"
                },
                "awssCapUrl": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Endpoint URL.\n"
                },
                "awstsAccountNumber": {
                    "type": "string",
                    "description": "AWS Top Secret Region Account Number.\n"
                },
                "awstsCaChainCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                },
                "awstsCapAgency": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Agency.\n"
                },
                "awstsCapCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path.\n"
                },
                "awstsCapCertKey": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                },
                "awstsCapCertKeyPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path on the controller.\n"
                },
                "awstsCapCertPath": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path on the controller.\n"
                },
                "awstsCapMission": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Mission.\n"
                },
                "awstsCapRoleName": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Role Name.\n"
                },
                "awstsCapUrl": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                },
                "azurechinaApplicationId": {
                    "type": "string",
                    "description": "Azure China Application ID.\n"
                },
                "azurechinaApplicationKey": {
                    "type": "string",
                    "description": "Azure China Application Key.\n"
                },
                "azurechinaDirectoryId": {
                    "type": "string",
                    "description": "Azure China Directory ID.\n"
                },
                "azurechinaSubscriptionId": {
                    "type": "string",
                    "description": "Azure China Subscription ID.\n"
                },
                "azuregovApplicationId": {
                    "type": "string",
                    "description": "Azure Gov Application ID.\n"
                },
                "azuregovApplicationKey": {
                    "type": "string",
                    "description": "Azure Gov Application Key.\n"
                },
                "azuregovDirectoryId": {
                    "type": "string",
                    "description": "Azure Gov Directory ID.\n"
                },
                "azuregovSubscriptionId": {
                    "type": "string",
                    "description": "Azure Gov Subscription ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "gcloudProjectCredentialsFilepath": {
                    "type": "string",
                    "description": "GCloud Project credentials local file path.\n"
                },
                "gcloudProjectId": {
                    "type": "string",
                    "description": "GCloud Project ID.\n"
                },
                "ociApiPrivateKeyFilepath": {
                    "type": "string",
                    "description": "OCI API Private Key local file path.\n"
                },
                "ociCompartmentId": {
                    "type": "string",
                    "description": "OCI Compartment OCID.\n"
                },
                "ociTenancyId": {
                    "type": "string",
                    "description": "OCI Tenancy OCID.\n"
                },
                "ociUserId": {
                    "type": "string",
                    "description": "OCI User OCID.\n"
                }
            },
            "required": [
                "accountName",
                "awsCaCertPath",
                "awsRoleApp",
                "awsRoleEc2",
                "awschinaRoleApp",
                "awschinaRoleEc2",
                "awsgovRoleApp",
                "awsgovRoleEc2",
                "awssCapCertKeyPath",
                "awssCapCertPath",
                "awstsCapCertKeyPath",
                "awstsCapCertPath",
                "cloudType"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n"
                },
                "alicloudAccessKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Access Key.\n"
                },
                "alicloudAccountId": {
                    "type": "string",
                    "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                },
                "alicloudSecretKey": {
                    "type": "string",
                    "description": "Alibaba Cloud Secret Key.\n"
                },
                "armApplicationId": {
                    "type": "string",
                    "description": "Azure Application ID.\n"
                },
                "armApplicationKey": {
                    "type": "string",
                    "description": "Azure Application Key.\n"
                },
                "armDirectoryId": {
                    "type": "string",
                    "description": "Azure Directory ID.\n"
                },
                "armSubscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "auditAccount": {
                    "type": "boolean",
                    "description": "Enable account audit.\n"
                },
                "awsAccessKey": {
                    "type": "string",
                    "description": "AWS Access Key.\n"
                },
                "awsAccountNumber": {
                    "type": "string",
                    "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                },
                "awsGatewayRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN for gateways.\n"
                },
                "awsGatewayRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN for gateways.\n"
                },
                "awsIam": {
                    "type": "boolean",
                    "description": "AWS IAM-role based flag.\n"
                },
                "awsRoleApp": {
                    "type": "string",
                    "description": "AWS App role ARN.\n"
                },
                "awsRoleEc2": {
                    "type": "string",
                    "description": "AWS EC2 role ARN.\n"
                },
                "awsSecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key.\n"
                },
                "awschinaAccessKey": {
                    "type": "string",
                    "description": "AWS China Access Key.\n"
                },
                "awschinaAccountNumber": {
                    "type": "string",
                    "description": "AWS China Account Number.\n"
                },
                "awschinaIam": {
                    "type": "boolean",
                    "description": "AWS China IAM-role based flag.\n"
                },
                "awschinaRoleApp": {
                    "type": "string",
                    "description": "AWS China App Role ARN.\n"
                },
                "awschinaRoleEc2": {
                    "type": "string",
                    "description": "AWS China EC2 Role ARN.\n"
                },
                "awschinaSecretKey": {
                    "type": "string",
                    "description": "AWS China Secret Key.\n"
                },
                "awsgovAccessKey": {
                    "type": "string",
                    "description": "AWS Gov Access Key.\n"
                },
                "awsgovAccountNumber": {
                    "type": "string",
                    "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                },
                "awsgovIam": {
                    "type": "boolean",
                    "description": "AWSGov IAM-role based flag\n"
                },
                "awsgovRoleApp": {
                    "type": "string",
                    "description": "AWSGov App role ARN\n"
                },
                "awsgovRoleEc2": {
                    "type": "string",
                    "description": "AWSGov EC2 role ARN\n"
                },
                "awsgovSecretKey": {
                    "type": "string",
                    "description": "AWS Gov Secret Key.\n"
                },
                "awssAccountNumber": {
                    "type": "string",
                    "description": "AWS Secret Region Account Number.\n"
                },
                "awssCaChainCert": {
                    "type": "string",
                    "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                },
                "awssCapAccountName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Account Name.\n"
                },
                "awssCapAgency": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Agency.\n"
                },
                "awssCapCert": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate file path.\n"
                },
                "awssCapCertKey": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Certificate Key file path.\n"
                },
                "awssCapRoleName": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Role Name.\n"
                },
                "awssCapUrl": {
                    "type": "string",
                    "description": "AWS Secret Region CAP Endpoint URL.\n"
                },
                "awstsAccountNumber": {
                    "type": "string",
                    "description": "AWS Top Secret Region Account Number.\n"
                },
                "awstsCaChainCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                },
                "awstsCapAgency": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Agency.\n"
                },
                "awstsCapCert": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate file path.\n"
                },
                "awstsCapCertKey": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                },
                "awstsCapMission": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Mission.\n"
                },
                "awstsCapRoleName": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Role Name.\n"
                },
                "awstsCapUrl": {
                    "type": "string",
                    "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                },
                "azurechinaApplicationId": {
                    "type": "string",
                    "description": "Azure China Application ID.\n"
                },
                "azurechinaApplicationKey": {
                    "type": "string",
                    "description": "Azure China Application Key.\n"
                },
                "azurechinaDirectoryId": {
                    "type": "string",
                    "description": "Azure China Directory ID.\n"
                },
                "azurechinaSubscriptionId": {
                    "type": "string",
                    "description": "Azure China Subscription ID.\n"
                },
                "azuregovApplicationId": {
                    "type": "string",
                    "description": "Azure Gov Application ID.\n"
                },
                "azuregovApplicationKey": {
                    "type": "string",
                    "description": "Azure Gov Application Key.\n"
                },
                "azuregovDirectoryId": {
                    "type": "string",
                    "description": "Azure Gov Directory ID.\n"
                },
                "azuregovSubscriptionId": {
                    "type": "string",
                    "description": "Azure Gov Subscription ID.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "gcloudProjectCredentialsFilepath": {
                    "type": "string",
                    "description": "GCloud Project credentials local file path.\n"
                },
                "gcloudProjectId": {
                    "type": "string",
                    "description": "GCloud Project ID.\n"
                },
                "ociApiPrivateKeyFilepath": {
                    "type": "string",
                    "description": "OCI API Private Key local file path.\n"
                },
                "ociCompartmentId": {
                    "type": "string",
                    "description": "OCI Compartment OCID.\n"
                },
                "ociTenancyId": {
                    "type": "string",
                    "description": "OCI Tenancy OCID.\n"
                },
                "ociUserId": {
                    "type": "string",
                    "description": "OCI User OCID.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This can be used for logging in to CloudN console or UserConnect controller.\n"
                    },
                    "alicloudAccessKey": {
                        "type": "string",
                        "description": "Alibaba Cloud Access Key.\n"
                    },
                    "alicloudAccountId": {
                        "type": "string",
                        "description": "Alibaba Cloud Account ID to associate with Aviatrix account.\n"
                    },
                    "alicloudSecretKey": {
                        "type": "string",
                        "description": "Alibaba Cloud Secret Key.\n"
                    },
                    "armApplicationId": {
                        "type": "string",
                        "description": "Azure Application ID.\n"
                    },
                    "armApplicationKey": {
                        "type": "string",
                        "description": "Azure Application Key.\n"
                    },
                    "armDirectoryId": {
                        "type": "string",
                        "description": "Azure Directory ID.\n"
                    },
                    "armSubscriptionId": {
                        "type": "string",
                        "description": "Azure Subscription ID.\n"
                    },
                    "auditAccount": {
                        "type": "boolean",
                        "description": "Enable account audit.\n"
                    },
                    "awsAccessKey": {
                        "type": "string",
                        "description": "AWS Access Key.\n"
                    },
                    "awsAccountNumber": {
                        "type": "string",
                        "description": "AWS Account number to associate with Aviatrix account. Should be 12 digits.\n"
                    },
                    "awsCaCertPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region or Secret Region Custom Certificate Authority file path on the controller.\n"
                    },
                    "awsGatewayRoleApp": {
                        "type": "string",
                        "description": "AWS App role ARN for gateways.\n"
                    },
                    "awsGatewayRoleEc2": {
                        "type": "string",
                        "description": "AWS EC2 role ARN for gateways.\n"
                    },
                    "awsIam": {
                        "type": "boolean",
                        "description": "AWS IAM-role based flag.\n"
                    },
                    "awsRoleApp": {
                        "type": "string",
                        "description": "AWS App role ARN.\n"
                    },
                    "awsRoleEc2": {
                        "type": "string",
                        "description": "AWS EC2 role ARN.\n"
                    },
                    "awsSecretKey": {
                        "type": "string",
                        "description": "AWS Secret Key.\n"
                    },
                    "awschinaAccessKey": {
                        "type": "string",
                        "description": "AWS China Access Key.\n"
                    },
                    "awschinaAccountNumber": {
                        "type": "string",
                        "description": "AWS China Account Number.\n"
                    },
                    "awschinaIam": {
                        "type": "boolean",
                        "description": "AWS China IAM-role based flag.\n"
                    },
                    "awschinaRoleApp": {
                        "type": "string",
                        "description": "AWS China App Role ARN.\n"
                    },
                    "awschinaRoleEc2": {
                        "type": "string",
                        "description": "AWS China EC2 Role ARN.\n"
                    },
                    "awschinaSecretKey": {
                        "type": "string",
                        "description": "AWS China Secret Key.\n"
                    },
                    "awsgovAccessKey": {
                        "type": "string",
                        "description": "AWS Gov Access Key.\n"
                    },
                    "awsgovAccountNumber": {
                        "type": "string",
                        "description": "AWS Gov Account number to associate with Aviatrix account.\n"
                    },
                    "awsgovIam": {
                        "type": "boolean",
                        "description": "AWSGov IAM-role based flag\n"
                    },
                    "awsgovRoleApp": {
                        "type": "string",
                        "description": "AWSGov App role ARN\n"
                    },
                    "awsgovRoleEc2": {
                        "type": "string",
                        "description": "AWSGov EC2 role ARN\n"
                    },
                    "awsgovSecretKey": {
                        "type": "string",
                        "description": "AWS Gov Secret Key.\n"
                    },
                    "awssAccountNumber": {
                        "type": "string",
                        "description": "AWS Secret Region Account Number.\n"
                    },
                    "awssCaChainCert": {
                        "type": "string",
                        "description": "AWS Secret Region Custom Certificate Authority file path.\n"
                    },
                    "awssCapAccountName": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Account Name.\n"
                    },
                    "awssCapAgency": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Agency.\n"
                    },
                    "awssCapCert": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate file path.\n"
                    },
                    "awssCapCertKey": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate Key file path.\n"
                    },
                    "awssCapCertKeyPath": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate Key file path on the controller.\n"
                    },
                    "awssCapCertPath": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Certificate file path on the controller.\n"
                    },
                    "awssCapRoleName": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Role Name.\n"
                    },
                    "awssCapUrl": {
                        "type": "string",
                        "description": "AWS Secret Region CAP Endpoint URL.\n"
                    },
                    "awstsAccountNumber": {
                        "type": "string",
                        "description": "AWS Top Secret Region Account Number.\n"
                    },
                    "awstsCaChainCert": {
                        "type": "string",
                        "description": "AWS Top Secret Region Custom Certificate Authority file path.\n"
                    },
                    "awstsCapAgency": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Agency.\n"
                    },
                    "awstsCapCert": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate file path.\n"
                    },
                    "awstsCapCertKey": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate Key file path.\n"
                    },
                    "awstsCapCertKeyPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate Key file path on the controller.\n"
                    },
                    "awstsCapCertPath": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Certificate file path on the controller.\n"
                    },
                    "awstsCapMission": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Mission.\n"
                    },
                    "awstsCapRoleName": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Role Name.\n"
                    },
                    "awstsCapUrl": {
                        "type": "string",
                        "description": "AWS Top Secret Region CAP Endpoint URL.\n"
                    },
                    "azurechinaApplicationId": {
                        "type": "string",
                        "description": "Azure China Application ID.\n"
                    },
                    "azurechinaApplicationKey": {
                        "type": "string",
                        "description": "Azure China Application Key.\n"
                    },
                    "azurechinaDirectoryId": {
                        "type": "string",
                        "description": "Azure China Directory ID.\n"
                    },
                    "azurechinaSubscriptionId": {
                        "type": "string",
                        "description": "Azure China Subscription ID.\n"
                    },
                    "azuregovApplicationId": {
                        "type": "string",
                        "description": "Azure Gov Application ID.\n"
                    },
                    "azuregovApplicationKey": {
                        "type": "string",
                        "description": "Azure Gov Application Key.\n"
                    },
                    "azuregovDirectoryId": {
                        "type": "string",
                        "description": "Azure Gov Directory ID.\n"
                    },
                    "azuregovSubscriptionId": {
                        "type": "string",
                        "description": "Azure Gov Subscription ID.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "gcloudProjectCredentialsFilepath": {
                        "type": "string",
                        "description": "GCloud Project credentials local file path.\n"
                    },
                    "gcloudProjectId": {
                        "type": "string",
                        "description": "GCloud Project ID.\n"
                    },
                    "ociApiPrivateKeyFilepath": {
                        "type": "string",
                        "description": "OCI API Private Key local file path.\n"
                    },
                    "ociCompartmentId": {
                        "type": "string",
                        "description": "OCI Compartment OCID.\n"
                    },
                    "ociTenancyId": {
                        "type": "string",
                        "description": "OCI Tenancy OCID.\n"
                    },
                    "ociUserId": {
                        "type": "string",
                        "description": "OCI User OCID.\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/gateway:Gateway": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                },
                "additionalCidrs": {
                    "type": "string",
                    "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                },
                "additionalCidrsDesignatedGateway": {
                    "type": "string",
                    "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                },
                "cloudInstanceId": {
                    "type": "string",
                    "description": "Instance ID of the gateway.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "duoApiHostname": {
                    "type": "string",
                    "description": "API hostname for DUO auth mode.\n"
                },
                "duoIntegrationKey": {
                    "type": "string",
                    "description": "Integration key for DUO auth mode.\n"
                },
                "duoPushMode": {
                    "type": "string",
                    "description": "Push mode for DUO auth.\n"
                },
                "duoSecretKey": {
                    "type": "string",
                    "description": "Secret key for DUO auth mode.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "elbDnsName": {
                    "type": "string",
                    "description": "ELB DNS Name.\n"
                },
                "elbName": {
                    "type": "string",
                    "description": "A name for the ELB that is created.\n"
                },
                "enableDesignatedGateway": {
                    "type": "boolean",
                    "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                },
                "enableElb": {
                    "type": "boolean",
                    "description": "Specify whether to enable ELB or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLdap": {
                    "type": "boolean",
                    "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                },
                "enablePublicSubnetFiltering": {
                    "type": "boolean",
                    "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "enableVpnNat": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "fqdnLanCidr": {
                    "type": "string",
                    "description": "FQDN gateway lan interface cidr.\n"
                },
                "fqdnLanInterface": {
                    "type": "string",
                    "description": "FQDN gateway lan interface id.\n"
                },
                "fqdnLanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name.\n"
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of Gateway Instance.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapPassword": {
                    "type": "string",
                    "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapServer": {
                    "type": "string",
                    "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapUsernameAttribute": {
                    "type": "string",
                    "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "maxVpnConn": {
                    "type": "string",
                    "description": "Maximum connection of VPN access.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "nameServers": {
                    "type": "string",
                    "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                },
                "oktaToken": {
                    "type": "string",
                    "description": "Token for Okta auth mode.\n"
                },
                "oktaUrl": {
                    "type": "string",
                    "description": "URL for Okta auth mode.\n"
                },
                "oktaUsernameSuffix": {
                    "type": "string",
                    "description": "Username suffix for Okta auth mode.\n"
                },
                "otpMode": {
                    "type": "string",
                    "description": "Two step authentication mode.\n"
                },
                "peeringHaAvailabilityDomain": {
                    "type": "string",
                    "description": "Peering HA availability domain for OCI.\n"
                },
                "peeringHaAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                },
                "peeringHaCloudInstanceId": {
                    "type": "string",
                    "description": "Instance ID of the peering HA gateway.\n"
                },
                "peeringHaEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA peering instance.\n"
                },
                "peeringHaFaultDomain": {
                    "type": "string",
                    "description": "Peering HA fault domain for OCI.\n"
                },
                "peeringHaGwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name of HA gateway.\n"
                },
                "peeringHaGwSize": {
                    "type": "string",
                    "description": "Peering HA Gateway Size.\n"
                },
                "peeringHaImageVersion": {
                    "type": "string",
                    "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                },
                "peeringHaInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                },
                "peeringHaPrivateIp": {
                    "type": "string",
                    "description": "Private IP address of HA gateway.\n"
                },
                "peeringHaSecurityGroupId": {
                    "type": "string",
                    "description": "Peering HA security group used for the gateway.\n"
                },
                "peeringHaSoftwareVersion": {
                    "type": "string",
                    "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                },
                "peeringHaSubnet": {
                    "type": "string",
                    "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                },
                "peeringHaZone": {
                    "type": "string",
                    "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "Private IP address of the Gateway created.\n"
                },
                "publicDnsServer": {
                    "type": "string",
                    "description": "NS server used by the gateway.\n"
                },
                "publicSubnetFilteringGuardDutyEnforced": {
                    "type": "boolean",
                    "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                },
                "publicSubnetFilteringHaRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                },
                "publicSubnetFilteringRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                },
                "renegotiationInterval": {
                    "type": "integer",
                    "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "samlEnabled": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable SAML or not.\n"
                },
                "searchDomains": {
                    "type": "string",
                    "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security group used for the gateway.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to true if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable Source NAT for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "splitTunnel": {
                    "type": "boolean",
                    "description": "Specify split tunnel mode.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A VPC Network address range selected from one of the available network ranges.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of legacy VPC/Vnet to be connected.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region where this gateway will be launched.\n"
                },
                "vpnAccess": {
                    "type": "boolean",
                    "description": "Enable user access through VPN to this container.\n"
                },
                "vpnCidr": {
                    "type": "string",
                    "description": "VPN CIDR block for the container.\n"
                },
                "vpnProtocol": {
                    "type": "string",
                    "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomain",
                "azureEipNameResourceGroup",
                "cloudInstanceId",
                "cloudType",
                "eip",
                "elbDnsName",
                "elbName",
                "faultDomain",
                "fqdnLanInterface",
                "gwName",
                "gwSize",
                "imageVersion",
                "peeringHaAvailabilityDomain",
                "peeringHaAzureEipNameResourceGroup",
                "peeringHaCloudInstanceId",
                "peeringHaEip",
                "peeringHaFaultDomain",
                "peeringHaGwName",
                "peeringHaImageVersion",
                "peeringHaPrivateIp",
                "peeringHaSecurityGroupId",
                "peeringHaSoftwareVersion",
                "privateIp",
                "publicDnsServer",
                "securityGroupId",
                "softwareVersion",
                "subnet",
                "tunnelDetectionTime",
                "vpcId",
                "vpcReg",
                "vpnProtocol"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                },
                "additionalCidrs": {
                    "type": "string",
                    "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                },
                "additionalCidrsDesignatedGateway": {
                    "type": "string",
                    "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                },
                "allocateNewEip": {
                    "type": "boolean",
                    "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                },
                "availabilityDomain": {
                    "type": "string",
                    "description": "Availability domain for OCI.\n"
                },
                "azureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "customerManagedKeys": {
                    "type": "string",
                    "description": "Customer managed key ID.\n"
                },
                "duoApiHostname": {
                    "type": "string",
                    "description": "API hostname for DUO auth mode.\n"
                },
                "duoIntegrationKey": {
                    "type": "string",
                    "description": "Integration key for DUO auth mode.\n"
                },
                "duoPushMode": {
                    "type": "string",
                    "description": "Push mode for DUO auth.\n"
                },
                "duoSecretKey": {
                    "type": "string",
                    "description": "Secret key for DUO auth mode.\n"
                },
                "eip": {
                    "type": "string",
                    "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                },
                "elbName": {
                    "type": "string",
                    "description": "A name for the ELB that is created.\n"
                },
                "enableDesignatedGateway": {
                    "type": "boolean",
                    "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                },
                "enableElb": {
                    "type": "boolean",
                    "description": "Specify whether to enable ELB or not.\n"
                },
                "enableEncryptVolume": {
                    "type": "boolean",
                    "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                },
                "enableJumboFrame": {
                    "type": "boolean",
                    "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                },
                "enableLdap": {
                    "type": "boolean",
                    "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                },
                "enableMonitorGatewaySubnets": {
                    "type": "boolean",
                    "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                },
                "enablePublicSubnetFiltering": {
                    "type": "boolean",
                    "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                },
                "enableSpotInstance": {
                    "type": "boolean",
                    "description": "Enable spot instance. NOT supported for production deployment.\n"
                },
                "enableVpcDnsServer": {
                    "type": "boolean",
                    "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                },
                "enableVpnNat": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                },
                "faultDomain": {
                    "type": "string",
                    "description": "Fault domain for OCI.\n"
                },
                "fqdnLanCidr": {
                    "type": "string",
                    "description": "FQDN gateway lan interface cidr.\n"
                },
                "fqdnLanVpcId": {
                    "type": "string",
                    "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n"
                },
                "gwName": {
                    "type": "string",
                    "description": "Aviatrix gateway unique name.\n"
                },
                "gwSize": {
                    "type": "string",
                    "description": "Size of Gateway Instance.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                },
                "insaneMode": {
                    "type": "boolean",
                    "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                },
                "insaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapPassword": {
                    "type": "string",
                    "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapServer": {
                    "type": "string",
                    "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "ldapUsernameAttribute": {
                    "type": "string",
                    "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                },
                "maxVpnConn": {
                    "type": "string",
                    "description": "Maximum connection of VPN access.\n"
                },
                "monitorExcludeLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                },
                "nameServers": {
                    "type": "string",
                    "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                },
                "oktaToken": {
                    "type": "string",
                    "description": "Token for Okta auth mode.\n"
                },
                "oktaUrl": {
                    "type": "string",
                    "description": "URL for Okta auth mode.\n"
                },
                "oktaUsernameSuffix": {
                    "type": "string",
                    "description": "Username suffix for Okta auth mode.\n"
                },
                "otpMode": {
                    "type": "string",
                    "description": "Two step authentication mode.\n"
                },
                "peeringHaAvailabilityDomain": {
                    "type": "string",
                    "description": "Peering HA availability domain for OCI.\n"
                },
                "peeringHaAzureEipNameResourceGroup": {
                    "type": "string",
                    "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                },
                "peeringHaEip": {
                    "type": "string",
                    "description": "Public IP address that you want assigned to the HA peering instance.\n"
                },
                "peeringHaFaultDomain": {
                    "type": "string",
                    "description": "Peering HA fault domain for OCI.\n"
                },
                "peeringHaGwSize": {
                    "type": "string",
                    "description": "Peering HA Gateway Size.\n"
                },
                "peeringHaImageVersion": {
                    "type": "string",
                    "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                },
                "peeringHaInsaneModeAz": {
                    "type": "string",
                    "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                },
                "peeringHaSoftwareVersion": {
                    "type": "string",
                    "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                },
                "peeringHaSubnet": {
                    "type": "string",
                    "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                },
                "peeringHaZone": {
                    "type": "string",
                    "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                },
                "publicSubnetFilteringGuardDutyEnforced": {
                    "type": "boolean",
                    "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                },
                "publicSubnetFilteringHaRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                },
                "publicSubnetFilteringRouteTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                },
                "renegotiationInterval": {
                    "type": "integer",
                    "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                },
                "rxQueueSize": {
                    "type": "string",
                    "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                },
                "samlEnabled": {
                    "type": "boolean",
                    "description": "This field indicates whether to enable SAML or not.\n"
                },
                "searchDomains": {
                    "type": "string",
                    "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                },
                "singleAzHa": {
                    "type": "boolean",
                    "description": "Set to true if this feature is desired.\n"
                },
                "singleIpSnat": {
                    "type": "boolean",
                    "description": "Enable Source NAT for this container.\n"
                },
                "softwareVersion": {
                    "type": "string",
                    "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                },
                "splitTunnel": {
                    "type": "boolean",
                    "description": "Specify split tunnel mode.\n"
                },
                "spotPrice": {
                    "type": "string",
                    "description": "Price for spot instance. NOT supported for production deployment.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A VPC Network address range selected from one of the available network ranges.\n"
                },
                "tagLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Instance tag of cloud provider.\n",
                    "deprecationMessage": "Use tags instead."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of tags to assign to the gateway.\n"
                },
                "tunnelDetectionTime": {
                    "type": "integer",
                    "description": "The IPSec tunnel down detection time for the Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of legacy VPC/Vnet to be connected.\n"
                },
                "vpcReg": {
                    "type": "string",
                    "description": "Region where this gateway will be launched.\n"
                },
                "vpnAccess": {
                    "type": "boolean",
                    "description": "Enable user access through VPN to this container.\n"
                },
                "vpnCidr": {
                    "type": "string",
                    "description": "VPN CIDR block for the container.\n"
                },
                "vpnProtocol": {
                    "type": "string",
                    "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType",
                "gwName",
                "gwSize",
                "subnet",
                "vpcId",
                "vpcReg"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This account will be used to launch Aviatrix gateway.\n"
                    },
                    "additionalCidrs": {
                        "type": "string",
                        "description": "A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.\n"
                    },
                    "additionalCidrsDesignatedGateway": {
                        "type": "string",
                        "description": "A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.\n"
                    },
                    "allocateNewEip": {
                        "type": "boolean",
                        "description": "When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and\nuse it for this gateway.\n"
                    },
                    "availabilityDomain": {
                        "type": "string",
                        "description": "Availability domain for OCI.\n"
                    },
                    "azureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to this Gateway.\n"
                    },
                    "cloudInstanceId": {
                        "type": "string",
                        "description": "Instance ID of the gateway.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "customerManagedKeys": {
                        "type": "string",
                        "description": "Customer managed key ID.\n"
                    },
                    "duoApiHostname": {
                        "type": "string",
                        "description": "API hostname for DUO auth mode.\n"
                    },
                    "duoIntegrationKey": {
                        "type": "string",
                        "description": "Integration key for DUO auth mode.\n"
                    },
                    "duoPushMode": {
                        "type": "string",
                        "description": "Push mode for DUO auth.\n"
                    },
                    "duoSecretKey": {
                        "type": "string",
                        "description": "Secret key for DUO auth mode.\n"
                    },
                    "eip": {
                        "type": "string",
                        "description": "Required when allocate_new_eip is false. It uses specified EIP for this gateway.\n"
                    },
                    "elbDnsName": {
                        "type": "string",
                        "description": "ELB DNS Name.\n"
                    },
                    "elbName": {
                        "type": "string",
                        "description": "A name for the ELB that is created.\n"
                    },
                    "enableDesignatedGateway": {
                        "type": "boolean",
                        "description": "Enable 'designated_gateway' feature for Gateway. Valid values: true, false.\n"
                    },
                    "enableElb": {
                        "type": "boolean",
                        "description": "Specify whether to enable ELB or not.\n"
                    },
                    "enableEncryptVolume": {
                        "type": "boolean",
                        "description": "Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.\n"
                    },
                    "enableJumboFrame": {
                        "type": "boolean",
                        "description": "Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.\n"
                    },
                    "enableLdap": {
                        "type": "boolean",
                        "description": "Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.\n"
                    },
                    "enableMonitorGatewaySubnets": {
                        "type": "boolean",
                        "description": "Enable monitor gateway subnets. Valid values: true, false. Default value: false.\n"
                    },
                    "enablePublicSubnetFiltering": {
                        "type": "boolean",
                        "description": "Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).\n"
                    },
                    "enableSpotInstance": {
                        "type": "boolean",
                        "description": "Enable spot instance. NOT supported for production deployment.\n"
                    },
                    "enableVpcDnsServer": {
                        "type": "boolean",
                        "description": "Enable vpc_dns_server for Gateway. Valid values: true, false.\n"
                    },
                    "enableVpnNat": {
                        "type": "boolean",
                        "description": "This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.\nDefault value: true.\n"
                    },
                    "faultDomain": {
                        "type": "string",
                        "description": "Fault domain for OCI.\n"
                    },
                    "fqdnLanCidr": {
                        "type": "string",
                        "description": "FQDN gateway lan interface cidr.\n"
                    },
                    "fqdnLanInterface": {
                        "type": "string",
                        "description": "FQDN gateway lan interface id.\n"
                    },
                    "fqdnLanVpcId": {
                        "type": "string",
                        "description": "LAN VPC ID. Only used for GCP FQDN Gateway.\n"
                    },
                    "gwName": {
                        "type": "string",
                        "description": "Aviatrix gateway unique name.\n"
                    },
                    "gwSize": {
                        "type": "string",
                        "description": "Size of Gateway Instance.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Typed value when modifying idle_timeout. If it's -1, this feature is disabled.\n"
                    },
                    "imageVersion": {
                        "type": "string",
                        "description": "image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway\nto the specified version.\n"
                    },
                    "insaneMode": {
                        "type": "boolean",
                        "description": "Enable Insane Mode for Gateway. Valid values: true, false.\n"
                    },
                    "insaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.\n"
                    },
                    "ldapBaseDn": {
                        "type": "string",
                        "description": "LDAP base DN. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapBindDn": {
                        "type": "string",
                        "description": "LDAP bind DN. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapPassword": {
                        "type": "string",
                        "description": "LDAP password. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapServer": {
                        "type": "string",
                        "description": "LDAP server address. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "ldapUsernameAttribute": {
                        "type": "string",
                        "description": "LDAP user attribute. Required: Yes if enable_ldap is 'yes'.\n"
                    },
                    "maxVpnConn": {
                        "type": "string",
                        "description": "Maximum connection of VPN access.\n"
                    },
                    "monitorExcludeLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.\n"
                    },
                    "nameServers": {
                        "type": "string",
                        "description": "A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.\n"
                    },
                    "oktaToken": {
                        "type": "string",
                        "description": "Token for Okta auth mode.\n"
                    },
                    "oktaUrl": {
                        "type": "string",
                        "description": "URL for Okta auth mode.\n"
                    },
                    "oktaUsernameSuffix": {
                        "type": "string",
                        "description": "Username suffix for Okta auth mode.\n"
                    },
                    "otpMode": {
                        "type": "string",
                        "description": "Two step authentication mode.\n"
                    },
                    "peeringHaAvailabilityDomain": {
                        "type": "string",
                        "description": "Peering HA availability domain for OCI.\n"
                    },
                    "peeringHaAzureEipNameResourceGroup": {
                        "type": "string",
                        "description": "The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.\n"
                    },
                    "peeringHaCloudInstanceId": {
                        "type": "string",
                        "description": "Instance ID of the peering HA gateway.\n"
                    },
                    "peeringHaEip": {
                        "type": "string",
                        "description": "Public IP address that you want assigned to the HA peering instance.\n"
                    },
                    "peeringHaFaultDomain": {
                        "type": "string",
                        "description": "Peering HA fault domain for OCI.\n"
                    },
                    "peeringHaGwName": {
                        "type": "string",
                        "description": "Aviatrix gateway unique name of HA gateway.\n"
                    },
                    "peeringHaGwSize": {
                        "type": "string",
                        "description": "Peering HA Gateway Size.\n"
                    },
                    "peeringHaImageVersion": {
                        "type": "string",
                        "description": "peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to\nupdate the gateway to the specified version.\n"
                    },
                    "peeringHaInsaneModeAz": {
                        "type": "string",
                        "description": "AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.\n"
                    },
                    "peeringHaPrivateIp": {
                        "type": "string",
                        "description": "Private IP address of HA gateway.\n"
                    },
                    "peeringHaSecurityGroupId": {
                        "type": "string",
                        "description": "Peering HA security group used for the gateway.\n"
                    },
                    "peeringHaSoftwareVersion": {
                        "type": "string",
                        "description": "peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt\nto update the gateway to the specified version. If left blank, the gateway software version will continue to be managed\nthrough the aviatrix_controller_config resource.\n"
                    },
                    "peeringHaSubnet": {
                        "type": "string",
                        "description": "Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha\ngateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)\n"
                    },
                    "peeringHaZone": {
                        "type": "string",
                        "description": "Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).\nOptional for cloud_type = 8 (Azure).\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "Private IP address of the Gateway created.\n"
                    },
                    "publicDnsServer": {
                        "type": "string",
                        "description": "NS server used by the gateway.\n"
                    },
                    "publicSubnetFilteringGuardDutyEnforced": {
                        "type": "boolean",
                        "description": "Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid\nvalues: true or false. Default value: true.\n"
                    },
                    "publicSubnetFilteringHaRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Route tables whose associated public subnets are protected for the HA PSF gateway. Required when\nenable_public_subnet_filtering and peering_ha_subnet are set.\n"
                    },
                    "publicSubnetFilteringRouteTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is\ntrue.\n"
                    },
                    "renegotiationInterval": {
                        "type": "integer",
                        "description": "Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.\n"
                    },
                    "rxQueueSize": {
                        "type": "string",
                        "description": "Gateway ethernet interface RX queue size. Supported for AWS related clouds only.\n"
                    },
                    "samlEnabled": {
                        "type": "boolean",
                        "description": "This field indicates whether to enable SAML or not.\n"
                    },
                    "searchDomains": {
                        "type": "string",
                        "description": "A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel\nMode is enabled.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Security group used for the gateway.\n"
                    },
                    "singleAzHa": {
                        "type": "boolean",
                        "description": "Set to true if this feature is desired.\n"
                    },
                    "singleIpSnat": {
                        "type": "boolean",
                        "description": "Enable Source NAT for this container.\n"
                    },
                    "softwareVersion": {
                        "type": "string",
                        "description": "software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the\ngateway to the specified version. If left blank, the gateway software version will continue to be managed through the\naviatrix_controller_config resource.\n"
                    },
                    "splitTunnel": {
                        "type": "boolean",
                        "description": "Specify split tunnel mode.\n"
                    },
                    "spotPrice": {
                        "type": "string",
                        "description": "Price for spot instance. NOT supported for production deployment.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A VPC Network address range selected from one of the available network ranges.\n"
                    },
                    "tagLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Instance tag of cloud provider.\n",
                        "deprecationMessage": "Use tags instead."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of tags to assign to the gateway.\n"
                    },
                    "tunnelDetectionTime": {
                        "type": "integer",
                        "description": "The IPSec tunnel down detection time for the Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of legacy VPC/Vnet to be connected.\n"
                    },
                    "vpcReg": {
                        "type": "string",
                        "description": "Region where this gateway will be launched.\n"
                    },
                    "vpnAccess": {
                        "type": "boolean",
                        "description": "Enable user access through VPN to this container.\n"
                    },
                    "vpnCidr": {
                        "type": "string",
                        "description": "VPN CIDR block for the container.\n"
                    },
                    "vpnProtocol": {
                        "type": "string",
                        "description": "Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,\n'TCP'' will be used.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability Zone. Only available for Azure and Public Subnet Filtering gateway\n"
                    }
                },
                "type": "object"
            }
        },
        "aviatrix:index/vpc:Vpc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to create an Aviatrix VPC.\n"
                },
                "availabilityDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OCI availability domains.\n"
                },
                "aviatrixFirenetVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n"
                },
                "aviatrixTransitVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n"
                },
                "azureVnetResourceId": {
                    "type": "string",
                    "description": "Azure vnet resource ID.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "enableNativeGwlb": {
                    "type": "boolean",
                    "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "enablePrivateOobSubnet": {
                    "type": "boolean",
                    "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n"
                },
                "faultDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OCI fault domains.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC to be created.\n"
                },
                "numOfSubnetPairs": {
                    "type": "integer",
                    "description": "Number of public subnet and private subnet pair to be created.\n"
                },
                "privateSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/VpcPrivateSubnet:VpcPrivateSubnet"
                    },
                    "description": "List of private subnet of the VPC to be created.\n"
                },
                "publicSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/VpcPublicSubnet:VpcPublicSubnet"
                    },
                    "description": "List of public subnet of the VPC to be created.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Resource group of the Azure VPC created.\n"
                },
                "routeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of route table ids associated with this VPC.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "Subnet size.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/VpcSubnet:VpcSubnet"
                    },
                    "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the VPC created.\n"
                }
            },
            "required": [
                "accountName",
                "availabilityDomains",
                "azureVnetResourceId",
                "cloudType",
                "faultDomains",
                "name",
                "privateSubnets",
                "publicSubnets",
                "resourceGroup",
                "routeTables",
                "subnets",
                "vpcId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Account name. This account will be used to create an Aviatrix VPC.\n"
                },
                "aviatrixFirenetVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n"
                },
                "aviatrixTransitVpc": {
                    "type": "boolean",
                    "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "cloudType": {
                    "type": "integer",
                    "description": "Type of cloud service provider.\n"
                },
                "enableNativeGwlb": {
                    "type": "boolean",
                    "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                },
                "enablePrivateOobSubnet": {
                    "type": "boolean",
                    "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC to be created.\n"
                },
                "numOfSubnetPairs": {
                    "type": "integer",
                    "description": "Number of public subnet and private subnet pair to be created.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Resource group of the Azure VPC created.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "Subnet size.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aviatrix:index/VpcSubnet:VpcSubnet"
                    },
                    "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "cloudType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Account name. This account will be used to create an Aviatrix VPC.\n"
                    },
                    "availabilityDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OCI availability domains.\n"
                    },
                    "aviatrixFirenetVpc": {
                        "type": "boolean",
                        "description": "Specify the VPC as Aviatrix FireNet VPC or not. Required to be false for GCP provider.\n"
                    },
                    "aviatrixTransitVpc": {
                        "type": "boolean",
                        "description": "Specify the VPC as Aviatrix Transit VPC or not. Required to be false for GCP provider.\n"
                    },
                    "azureVnetResourceId": {
                        "type": "string",
                        "description": "Azure vnet resource ID.\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "Subnet of the VPC to be created. Required to be empty for GCP provider, and non-empty for other providers.\n"
                    },
                    "cloudType": {
                        "type": "integer",
                        "description": "Type of cloud service provider.\n"
                    },
                    "enableNativeGwlb": {
                        "type": "boolean",
                        "description": "Enable Native AWS GWLB for FireNet Function. Only valid with cloud_type = 1 (AWS). Valid values: true or false. Default\nvalue: false. Available as of provider version R2.18+.\n"
                    },
                    "enablePrivateOobSubnet": {
                        "type": "boolean",
                        "description": "Switch to enable private oob subnet. Only supported for AWS/AWSGov provider. Valid values: true, false. Default value:\nfalse.\n"
                    },
                    "faultDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OCI fault domains.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC to be created.\n"
                    },
                    "numOfSubnetPairs": {
                        "type": "integer",
                        "description": "Number of public subnet and private subnet pair to be created.\n"
                    },
                    "privateSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/VpcPrivateSubnet:VpcPrivateSubnet"
                        },
                        "description": "List of private subnet of the VPC to be created.\n"
                    },
                    "publicSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/VpcPublicSubnet:VpcPublicSubnet"
                        },
                        "description": "List of public subnet of the VPC to be created.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "Resource group of the Azure VPC created.\n"
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of route table ids associated with this VPC.\n"
                    },
                    "subnetSize": {
                        "type": "integer",
                        "description": "Subnet size.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aviatrix:index/VpcSubnet:VpcSubnet"
                        },
                        "description": "List of subnet of the VPC to be created. Required to be non-empty for GCP provider, and empty for other providers.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC created.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-aviatrix/sdk/go/aviatrix"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing aviatrix cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-aviatrix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-aviatrix` repo](https://github.com/pulumi/pulumi-aviatrix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-aviatrix` repo](https://github.com/terraform-providers/terraform-provider-aviatrix/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-aviatrix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-aviatrix` repo](https://github.com/pulumi/pulumi-aviatrix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-aviatrix` repo](https://github.com/terraform-providers/terraform-provider-aviatrix/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}