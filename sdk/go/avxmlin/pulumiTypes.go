// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avxmlin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcPrivateSubnet struct {
	Cidr     *string `pulumi:"cidr"`
	Name     *string `pulumi:"name"`
	SubnetId *string `pulumi:"subnetId"`
}

// VpcPrivateSubnetInput is an input type that accepts VpcPrivateSubnetArgs and VpcPrivateSubnetOutput values.
// You can construct a concrete instance of `VpcPrivateSubnetInput` via:
//
//          VpcPrivateSubnetArgs{...}
type VpcPrivateSubnetInput interface {
	pulumi.Input

	ToVpcPrivateSubnetOutput() VpcPrivateSubnetOutput
	ToVpcPrivateSubnetOutputWithContext(context.Context) VpcPrivateSubnetOutput
}

type VpcPrivateSubnetArgs struct {
	Cidr     pulumi.StringPtrInput `pulumi:"cidr"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (VpcPrivateSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateSubnet)(nil)).Elem()
}

func (i VpcPrivateSubnetArgs) ToVpcPrivateSubnetOutput() VpcPrivateSubnetOutput {
	return i.ToVpcPrivateSubnetOutputWithContext(context.Background())
}

func (i VpcPrivateSubnetArgs) ToVpcPrivateSubnetOutputWithContext(ctx context.Context) VpcPrivateSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateSubnetOutput)
}

// VpcPrivateSubnetArrayInput is an input type that accepts VpcPrivateSubnetArray and VpcPrivateSubnetArrayOutput values.
// You can construct a concrete instance of `VpcPrivateSubnetArrayInput` via:
//
//          VpcPrivateSubnetArray{ VpcPrivateSubnetArgs{...} }
type VpcPrivateSubnetArrayInput interface {
	pulumi.Input

	ToVpcPrivateSubnetArrayOutput() VpcPrivateSubnetArrayOutput
	ToVpcPrivateSubnetArrayOutputWithContext(context.Context) VpcPrivateSubnetArrayOutput
}

type VpcPrivateSubnetArray []VpcPrivateSubnetInput

func (VpcPrivateSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPrivateSubnet)(nil)).Elem()
}

func (i VpcPrivateSubnetArray) ToVpcPrivateSubnetArrayOutput() VpcPrivateSubnetArrayOutput {
	return i.ToVpcPrivateSubnetArrayOutputWithContext(context.Background())
}

func (i VpcPrivateSubnetArray) ToVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) VpcPrivateSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPrivateSubnetArrayOutput)
}

type VpcPrivateSubnetOutput struct{ *pulumi.OutputState }

func (VpcPrivateSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPrivateSubnet)(nil)).Elem()
}

func (o VpcPrivateSubnetOutput) ToVpcPrivateSubnetOutput() VpcPrivateSubnetOutput {
	return o
}

func (o VpcPrivateSubnetOutput) ToVpcPrivateSubnetOutputWithContext(ctx context.Context) VpcPrivateSubnetOutput {
	return o
}

func (o VpcPrivateSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

func (o VpcPrivateSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VpcPrivateSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPrivateSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcPrivateSubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcPrivateSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPrivateSubnet)(nil)).Elem()
}

func (o VpcPrivateSubnetArrayOutput) ToVpcPrivateSubnetArrayOutput() VpcPrivateSubnetArrayOutput {
	return o
}

func (o VpcPrivateSubnetArrayOutput) ToVpcPrivateSubnetArrayOutputWithContext(ctx context.Context) VpcPrivateSubnetArrayOutput {
	return o
}

func (o VpcPrivateSubnetArrayOutput) Index(i pulumi.IntInput) VpcPrivateSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcPrivateSubnet {
		return vs[0].([]VpcPrivateSubnet)[vs[1].(int)]
	}).(VpcPrivateSubnetOutput)
}

type VpcPublicSubnet struct {
	Cidr     *string `pulumi:"cidr"`
	Name     *string `pulumi:"name"`
	SubnetId *string `pulumi:"subnetId"`
}

// VpcPublicSubnetInput is an input type that accepts VpcPublicSubnetArgs and VpcPublicSubnetOutput values.
// You can construct a concrete instance of `VpcPublicSubnetInput` via:
//
//          VpcPublicSubnetArgs{...}
type VpcPublicSubnetInput interface {
	pulumi.Input

	ToVpcPublicSubnetOutput() VpcPublicSubnetOutput
	ToVpcPublicSubnetOutputWithContext(context.Context) VpcPublicSubnetOutput
}

type VpcPublicSubnetArgs struct {
	Cidr     pulumi.StringPtrInput `pulumi:"cidr"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (VpcPublicSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPublicSubnet)(nil)).Elem()
}

func (i VpcPublicSubnetArgs) ToVpcPublicSubnetOutput() VpcPublicSubnetOutput {
	return i.ToVpcPublicSubnetOutputWithContext(context.Background())
}

func (i VpcPublicSubnetArgs) ToVpcPublicSubnetOutputWithContext(ctx context.Context) VpcPublicSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPublicSubnetOutput)
}

// VpcPublicSubnetArrayInput is an input type that accepts VpcPublicSubnetArray and VpcPublicSubnetArrayOutput values.
// You can construct a concrete instance of `VpcPublicSubnetArrayInput` via:
//
//          VpcPublicSubnetArray{ VpcPublicSubnetArgs{...} }
type VpcPublicSubnetArrayInput interface {
	pulumi.Input

	ToVpcPublicSubnetArrayOutput() VpcPublicSubnetArrayOutput
	ToVpcPublicSubnetArrayOutputWithContext(context.Context) VpcPublicSubnetArrayOutput
}

type VpcPublicSubnetArray []VpcPublicSubnetInput

func (VpcPublicSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPublicSubnet)(nil)).Elem()
}

func (i VpcPublicSubnetArray) ToVpcPublicSubnetArrayOutput() VpcPublicSubnetArrayOutput {
	return i.ToVpcPublicSubnetArrayOutputWithContext(context.Background())
}

func (i VpcPublicSubnetArray) ToVpcPublicSubnetArrayOutputWithContext(ctx context.Context) VpcPublicSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPublicSubnetArrayOutput)
}

type VpcPublicSubnetOutput struct{ *pulumi.OutputState }

func (VpcPublicSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPublicSubnet)(nil)).Elem()
}

func (o VpcPublicSubnetOutput) ToVpcPublicSubnetOutput() VpcPublicSubnetOutput {
	return o
}

func (o VpcPublicSubnetOutput) ToVpcPublicSubnetOutputWithContext(ctx context.Context) VpcPublicSubnetOutput {
	return o
}

func (o VpcPublicSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPublicSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

func (o VpcPublicSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPublicSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VpcPublicSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcPublicSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcPublicSubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcPublicSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPublicSubnet)(nil)).Elem()
}

func (o VpcPublicSubnetArrayOutput) ToVpcPublicSubnetArrayOutput() VpcPublicSubnetArrayOutput {
	return o
}

func (o VpcPublicSubnetArrayOutput) ToVpcPublicSubnetArrayOutputWithContext(ctx context.Context) VpcPublicSubnetArrayOutput {
	return o
}

func (o VpcPublicSubnetArrayOutput) Index(i pulumi.IntInput) VpcPublicSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcPublicSubnet {
		return vs[0].([]VpcPublicSubnet)[vs[1].(int)]
	}).(VpcPublicSubnetOutput)
}

type VpcSubnet struct {
	Cidr     *string `pulumi:"cidr"`
	Name     *string `pulumi:"name"`
	Region   *string `pulumi:"region"`
	SubnetId *string `pulumi:"subnetId"`
}

// VpcSubnetInput is an input type that accepts VpcSubnetArgs and VpcSubnetOutput values.
// You can construct a concrete instance of `VpcSubnetInput` via:
//
//          VpcSubnetArgs{...}
type VpcSubnetInput interface {
	pulumi.Input

	ToVpcSubnetOutput() VpcSubnetOutput
	ToVpcSubnetOutputWithContext(context.Context) VpcSubnetOutput
}

type VpcSubnetArgs struct {
	Cidr     pulumi.StringPtrInput `pulumi:"cidr"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Region   pulumi.StringPtrInput `pulumi:"region"`
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (VpcSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetArgs) ToVpcSubnetOutput() VpcSubnetOutput {
	return i.ToVpcSubnetOutputWithContext(context.Background())
}

func (i VpcSubnetArgs) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetOutput)
}

// VpcSubnetArrayInput is an input type that accepts VpcSubnetArray and VpcSubnetArrayOutput values.
// You can construct a concrete instance of `VpcSubnetArrayInput` via:
//
//          VpcSubnetArray{ VpcSubnetArgs{...} }
type VpcSubnetArrayInput interface {
	pulumi.Input

	ToVpcSubnetArrayOutput() VpcSubnetArrayOutput
	ToVpcSubnetArrayOutputWithContext(context.Context) VpcSubnetArrayOutput
}

type VpcSubnetArray []VpcSubnetInput

func (VpcSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return i.ToVpcSubnetArrayOutputWithContext(context.Background())
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetArrayOutput)
}

type VpcSubnetOutput struct{ *pulumi.OutputState }

func (VpcSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetOutput) ToVpcSubnetOutput() VpcSubnetOutput {
	return o
}

func (o VpcSubnetOutput) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return o
}

func (o VpcSubnetOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcSubnet) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

func (o VpcSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VpcSubnetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcSubnet) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o VpcSubnetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcSubnet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcSubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) Index(i pulumi.IntInput) VpcSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcSubnet {
		return vs[0].([]VpcSubnet)[vs[1].(int)]
	}).(VpcSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateSubnetInput)(nil)).Elem(), VpcPrivateSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPrivateSubnetArrayInput)(nil)).Elem(), VpcPrivateSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPublicSubnetInput)(nil)).Elem(), VpcPublicSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPublicSubnetArrayInput)(nil)).Elem(), VpcPublicSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetInput)(nil)).Elem(), VpcSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetArrayInput)(nil)).Elem(), VpcSubnetArray{})
	pulumi.RegisterOutputType(VpcPrivateSubnetOutput{})
	pulumi.RegisterOutputType(VpcPrivateSubnetArrayOutput{})
	pulumi.RegisterOutputType(VpcPublicSubnetOutput{})
	pulumi.RegisterOutputType(VpcPublicSubnetArrayOutput{})
	pulumi.RegisterOutputType(VpcSubnetOutput{})
	pulumi.RegisterOutputType(VpcSubnetArrayOutput{})
}
