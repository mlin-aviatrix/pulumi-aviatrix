// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpokeGateway struct {
	pulumi.CustomResourceState

	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
	// this gateway.
	AllocateNewEip pulumi.BoolPtrOutput `pulumi:"allocateNewEip"`
	// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
	ApprovedLearnedCidrs pulumi.StringArrayOutput `pulumi:"approvedLearnedCidrs"`
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
	AzureEipNameResourceGroup pulumi.StringOutput `pulumi:"azureEipNameResourceGroup"`
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
	BgpEcmp pulumi.BoolPtrOutput `pulumi:"bgpEcmp"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrOutput `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrOutput `pulumi:"bgpPollingTime"`
	// Cloud instance ID.
	CloudInstanceId pulumi.StringOutput `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	CloudType pulumi.IntOutput `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrOutput `pulumi:"customerManagedKeys"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
	// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
	CustomizedSpokeVpcRoutes pulumi.StringPtrOutput `pulumi:"customizedSpokeVpcRoutes"`
	// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
	DisableRoutePropagation pulumi.BoolPtrOutput `pulumi:"disableRoutePropagation"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringOutput `pulumi:"eip"`
	// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
	EnableActiveStandby pulumi.BoolPtrOutput `pulumi:"enableActiveStandby"`
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive pulumi.BoolPtrOutput `pulumi:"enableActiveStandbyPreemptive"`
	// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
	EnableAutoAdvertiseS2cCidrs pulumi.BoolPtrOutput `pulumi:"enableAutoAdvertiseS2cCidrs"`
	// Enable BGP. Default: false.
	EnableBgp pulumi.BoolPtrOutput `pulumi:"enableBgp"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrOutput `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrOutput `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrOutput `pulumi:"enableLearnedCidrsApproval"`
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
	// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrOutput `pulumi:"enableMonitorGatewaySubnets"`
	// Enable private OOB.
	EnablePrivateOob pulumi.BoolPtrOutput `pulumi:"enablePrivateOob"`
	// Config Private VPC Default Route.
	EnablePrivateVpcDefaultRoute pulumi.BoolPtrOutput `pulumi:"enablePrivateVpcDefaultRoute"`
	// Skip Public Route Table Update.
	EnableSkipPublicRouteTableUpdate pulumi.BoolPtrOutput `pulumi:"enableSkipPublicRouteTableUpdate"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrOutput `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrOutput `pulumi:"enableVpcDnsServer"`
	// Fault domain for OCI.
	FaultDomain pulumi.StringOutput `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
	// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
	// this spoke gateway only.
	FilteredSpokeVpcRoutes pulumi.StringPtrOutput `pulumi:"filteredSpokeVpcRoutes"`
	// Name of the gateway which is going to be created.
	GwName pulumi.StringOutput `pulumi:"gwName"`
	// Size of the gateway instance.
	GwSize pulumi.StringOutput `pulumi:"gwSize"`
	// HA availability domain for OCI.
	HaAvailabilityDomain pulumi.StringOutput `pulumi:"haAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
	HaAzureEipNameResourceGroup pulumi.StringOutput `pulumi:"haAzureEipNameResourceGroup"`
	// Cloud instance ID of HA spoke gateway.
	HaCloudInstanceId pulumi.StringOutput `pulumi:"haCloudInstanceId"`
	// Public IP address that you want assigned to the HA Spoke Gateway.
	HaEip pulumi.StringOutput `pulumi:"haEip"`
	// HA fault domain for OCI.
	HaFaultDomain pulumi.StringOutput `pulumi:"haFaultDomain"`
	// Aviatrix spoke gateway unique name of HA spoke gateway.
	HaGwName pulumi.StringOutput `pulumi:"haGwName"`
	// HA Gateway Size.
	HaGwSize pulumi.StringPtrOutput `pulumi:"haGwSize"`
	// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
	// gateway to the specified version.
	HaImageVersion pulumi.StringOutput `pulumi:"haImageVersion"`
	// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
	// set.
	HaInsaneModeAz pulumi.StringPtrOutput `pulumi:"haInsaneModeAz"`
	// OOB HA availability zone.
	HaOobAvailabilityZone pulumi.StringPtrOutput `pulumi:"haOobAvailabilityZone"`
	// OOB HA management subnet.
	HaOobManagementSubnet pulumi.StringPtrOutput `pulumi:"haOobManagementSubnet"`
	// Private IP address of the spoke gateway created.
	HaPrivateIp pulumi.StringOutput `pulumi:"haPrivateIp"`
	// HA security group used for the spoke gateway.
	HaSecurityGroupId pulumi.StringOutput `pulumi:"haSecurityGroupId"`
	// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
	// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
	// the aviatrix_controller_config resource.
	HaSoftwareVersion pulumi.StringOutput `pulumi:"haSoftwareVersion"`
	// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
	// for GCP.
	HaSubnet pulumi.StringPtrOutput `pulumi:"haSubnet"`
	// HA Zone. Required if enabling HA for GCP. Optional for Azure.
	HaZone pulumi.StringPtrOutput `pulumi:"haZone"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringOutput `pulumi:"imageVersion"`
	// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
	// all advertised routes from this VPC.
	IncludedAdvertisedSpokeRoutes pulumi.StringPtrOutput `pulumi:"includedAdvertisedSpokeRoutes"`
	// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
	// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
	InsaneMode pulumi.BoolPtrOutput `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
	InsaneModeAz pulumi.StringPtrOutput `pulumi:"insaneModeAz"`
	// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
	// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
	// 'gateway'.
	LearnedCidrsApprovalMode pulumi.StringPtrOutput `pulumi:"learnedCidrsApprovalMode"`
	// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
	LocalAsNumber pulumi.StringOutput `pulumi:"localAsNumber"`
	// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
	// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
	// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
	ManageTransitGatewayAttachment pulumi.BoolPtrOutput `pulumi:"manageTransitGatewayAttachment"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayOutput `pulumi:"monitorExcludeLists"`
	// OOB subnet availability zone.
	OobAvailabilityZone pulumi.StringPtrOutput `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet pulumi.StringPtrOutput `pulumi:"oobManagementSubnet"`
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
	// Gateway
	PrependAsPaths pulumi.StringArrayOutput `pulumi:"prependAsPaths"`
	// Private IP address of the spoke gateway created.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrOutput `pulumi:"rxQueueSize"`
	// Security group used for the spoke gateway.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Set to 'enabled' if this feature is desired.
	SingleAzHa pulumi.BoolPtrOutput `pulumi:"singleAzHa"`
	// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
	SingleIpSnat pulumi.BoolPtrOutput `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringOutput `pulumi:"softwareVersion"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayOutput `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrOutput `pulumi:"spotPrice"`
	// Public Subnet Info.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayOutput `pulumi:"tagLists"`
	// A map of tags to assign to the spoke gateway.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
	// example, 'transit-gw1,transit-gw2'.
	//
	// Deprecated: Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead.
	TransitGw pulumi.StringPtrOutput `pulumi:"transitGw"`
	// The IPSec tunnel down detection time for the Spoke Gateway.
	TunnelDetectionTime pulumi.IntOutput `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg pulumi.StringOutput `pulumi:"vpcReg"`
	// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewSpokeGateway registers a new resource with the given unique name, arguments, and options.
func NewSpokeGateway(ctx *pulumi.Context,
	name string, args *SpokeGatewayArgs, opts ...pulumi.ResourceOption) (*SpokeGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.CloudType == nil {
		return nil, errors.New("invalid value for required argument 'CloudType'")
	}
	if args.GwName == nil {
		return nil, errors.New("invalid value for required argument 'GwName'")
	}
	if args.GwSize == nil {
		return nil, errors.New("invalid value for required argument 'GwSize'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpcReg == nil {
		return nil, errors.New("invalid value for required argument 'VpcReg'")
	}
	var resource SpokeGateway
	err := ctx.RegisterResource("aviatrix:index/spokeGateway:SpokeGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpokeGateway gets an existing SpokeGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpokeGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpokeGatewayState, opts ...pulumi.ResourceOption) (*SpokeGateway, error) {
	var resource SpokeGateway
	err := ctx.ReadResource("aviatrix:index/spokeGateway:SpokeGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpokeGateway resources.
type spokeGatewayState struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName *string `pulumi:"accountName"`
	// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
	// this gateway.
	AllocateNewEip *bool `pulumi:"allocateNewEip"`
	// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
	ApprovedLearnedCidrs []string `pulumi:"approvedLearnedCidrs"`
	// Availability domain for OCI.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
	AzureEipNameResourceGroup *string `pulumi:"azureEipNameResourceGroup"`
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
	BgpEcmp *bool `pulumi:"bgpEcmp"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime *int `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime *int `pulumi:"bgpPollingTime"`
	// Cloud instance ID.
	CloudInstanceId *string `pulumi:"cloudInstanceId"`
	// Type of cloud service provider.
	CloudType *int `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys *string `pulumi:"customerManagedKeys"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
	// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
	CustomizedSpokeVpcRoutes *string `pulumi:"customizedSpokeVpcRoutes"`
	// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
	DisableRoutePropagation *bool `pulumi:"disableRoutePropagation"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip *string `pulumi:"eip"`
	// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
	EnableActiveStandby *bool `pulumi:"enableActiveStandby"`
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive *bool `pulumi:"enableActiveStandbyPreemptive"`
	// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
	EnableAutoAdvertiseS2cCidrs *bool `pulumi:"enableAutoAdvertiseS2cCidrs"`
	// Enable BGP. Default: false.
	EnableBgp *bool `pulumi:"enableBgp"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume *bool `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
	// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets *bool `pulumi:"enableMonitorGatewaySubnets"`
	// Enable private OOB.
	EnablePrivateOob *bool `pulumi:"enablePrivateOob"`
	// Config Private VPC Default Route.
	EnablePrivateVpcDefaultRoute *bool `pulumi:"enablePrivateVpcDefaultRoute"`
	// Skip Public Route Table Update.
	EnableSkipPublicRouteTableUpdate *bool `pulumi:"enableSkipPublicRouteTableUpdate"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance *bool `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// Fault domain for OCI.
	FaultDomain *string `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
	// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
	// this spoke gateway only.
	FilteredSpokeVpcRoutes *string `pulumi:"filteredSpokeVpcRoutes"`
	// Name of the gateway which is going to be created.
	GwName *string `pulumi:"gwName"`
	// Size of the gateway instance.
	GwSize *string `pulumi:"gwSize"`
	// HA availability domain for OCI.
	HaAvailabilityDomain *string `pulumi:"haAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
	HaAzureEipNameResourceGroup *string `pulumi:"haAzureEipNameResourceGroup"`
	// Cloud instance ID of HA spoke gateway.
	HaCloudInstanceId *string `pulumi:"haCloudInstanceId"`
	// Public IP address that you want assigned to the HA Spoke Gateway.
	HaEip *string `pulumi:"haEip"`
	// HA fault domain for OCI.
	HaFaultDomain *string `pulumi:"haFaultDomain"`
	// Aviatrix spoke gateway unique name of HA spoke gateway.
	HaGwName *string `pulumi:"haGwName"`
	// HA Gateway Size.
	HaGwSize *string `pulumi:"haGwSize"`
	// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
	// gateway to the specified version.
	HaImageVersion *string `pulumi:"haImageVersion"`
	// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
	// set.
	HaInsaneModeAz *string `pulumi:"haInsaneModeAz"`
	// OOB HA availability zone.
	HaOobAvailabilityZone *string `pulumi:"haOobAvailabilityZone"`
	// OOB HA management subnet.
	HaOobManagementSubnet *string `pulumi:"haOobManagementSubnet"`
	// Private IP address of the spoke gateway created.
	HaPrivateIp *string `pulumi:"haPrivateIp"`
	// HA security group used for the spoke gateway.
	HaSecurityGroupId *string `pulumi:"haSecurityGroupId"`
	// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
	// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
	// the aviatrix_controller_config resource.
	HaSoftwareVersion *string `pulumi:"haSoftwareVersion"`
	// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
	// for GCP.
	HaSubnet *string `pulumi:"haSubnet"`
	// HA Zone. Required if enabling HA for GCP. Optional for Azure.
	HaZone *string `pulumi:"haZone"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion *string `pulumi:"imageVersion"`
	// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
	// all advertised routes from this VPC.
	IncludedAdvertisedSpokeRoutes *string `pulumi:"includedAdvertisedSpokeRoutes"`
	// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
	// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
	// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
	// 'gateway'.
	LearnedCidrsApprovalMode *string `pulumi:"learnedCidrsApprovalMode"`
	// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
	// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
	// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
	ManageTransitGatewayAttachment *bool `pulumi:"manageTransitGatewayAttachment"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists []string `pulumi:"monitorExcludeLists"`
	// OOB subnet availability zone.
	OobAvailabilityZone *string `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet *string `pulumi:"oobManagementSubnet"`
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
	// Gateway
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Private IP address of the spoke gateway created.
	PrivateIp *string `pulumi:"privateIp"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// Security group used for the spoke gateway.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Set to 'enabled' if this feature is desired.
	SingleAzHa *bool `pulumi:"singleAzHa"`
	// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
	SingleIpSnat *bool `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs []string `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice *string `pulumi:"spotPrice"`
	// Public Subnet Info.
	Subnet *string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists []string `pulumi:"tagLists"`
	// A map of tags to assign to the spoke gateway.
	Tags map[string]string `pulumi:"tags"`
	// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
	// example, 'transit-gw1,transit-gw2'.
	//
	// Deprecated: Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead.
	TransitGw *string `pulumi:"transitGw"`
	// The IPSec tunnel down detection time for the Spoke Gateway.
	TunnelDetectionTime *int `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId *string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg *string `pulumi:"vpcReg"`
	// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone *string `pulumi:"zone"`
}

type SpokeGatewayState struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringPtrInput
	// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
	// this gateway.
	AllocateNewEip pulumi.BoolPtrInput
	// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
	ApprovedLearnedCidrs pulumi.StringArrayInput
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
	AzureEipNameResourceGroup pulumi.StringPtrInput
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
	BgpEcmp pulumi.BoolPtrInput
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrInput
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrInput
	// Cloud instance ID.
	CloudInstanceId pulumi.StringPtrInput
	// Type of cloud service provider.
	CloudType pulumi.IntPtrInput
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrInput
	// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
	// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
	CustomizedSpokeVpcRoutes pulumi.StringPtrInput
	// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
	DisableRoutePropagation pulumi.BoolPtrInput
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringPtrInput
	// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
	EnableActiveStandby pulumi.BoolPtrInput
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive pulumi.BoolPtrInput
	// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
	EnableAutoAdvertiseS2cCidrs pulumi.BoolPtrInput
	// Enable BGP. Default: false.
	EnableBgp pulumi.BoolPtrInput
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrInput
	// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrInput
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
	// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrInput
	// Enable private OOB.
	EnablePrivateOob pulumi.BoolPtrInput
	// Config Private VPC Default Route.
	EnablePrivateVpcDefaultRoute pulumi.BoolPtrInput
	// Skip Public Route Table Update.
	EnableSkipPublicRouteTableUpdate pulumi.BoolPtrInput
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrInput
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// Fault domain for OCI.
	FaultDomain pulumi.StringPtrInput
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
	// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
	// this spoke gateway only.
	FilteredSpokeVpcRoutes pulumi.StringPtrInput
	// Name of the gateway which is going to be created.
	GwName pulumi.StringPtrInput
	// Size of the gateway instance.
	GwSize pulumi.StringPtrInput
	// HA availability domain for OCI.
	HaAvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
	HaAzureEipNameResourceGroup pulumi.StringPtrInput
	// Cloud instance ID of HA spoke gateway.
	HaCloudInstanceId pulumi.StringPtrInput
	// Public IP address that you want assigned to the HA Spoke Gateway.
	HaEip pulumi.StringPtrInput
	// HA fault domain for OCI.
	HaFaultDomain pulumi.StringPtrInput
	// Aviatrix spoke gateway unique name of HA spoke gateway.
	HaGwName pulumi.StringPtrInput
	// HA Gateway Size.
	HaGwSize pulumi.StringPtrInput
	// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
	// gateway to the specified version.
	HaImageVersion pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
	// set.
	HaInsaneModeAz pulumi.StringPtrInput
	// OOB HA availability zone.
	HaOobAvailabilityZone pulumi.StringPtrInput
	// OOB HA management subnet.
	HaOobManagementSubnet pulumi.StringPtrInput
	// Private IP address of the spoke gateway created.
	HaPrivateIp pulumi.StringPtrInput
	// HA security group used for the spoke gateway.
	HaSecurityGroupId pulumi.StringPtrInput
	// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
	// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
	// the aviatrix_controller_config resource.
	HaSoftwareVersion pulumi.StringPtrInput
	// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
	// for GCP.
	HaSubnet pulumi.StringPtrInput
	// HA Zone. Required if enabling HA for GCP. Optional for Azure.
	HaZone pulumi.StringPtrInput
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringPtrInput
	// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
	// all advertised routes from this VPC.
	IncludedAdvertisedSpokeRoutes pulumi.StringPtrInput
	// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
	// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
	InsaneModeAz pulumi.StringPtrInput
	// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
	// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
	// 'gateway'.
	LearnedCidrsApprovalMode pulumi.StringPtrInput
	// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
	LocalAsNumber pulumi.StringPtrInput
	// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
	// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
	// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
	ManageTransitGatewayAttachment pulumi.BoolPtrInput
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayInput
	// OOB subnet availability zone.
	OobAvailabilityZone pulumi.StringPtrInput
	// OOB management subnet.
	OobManagementSubnet pulumi.StringPtrInput
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
	// Gateway
	PrependAsPaths pulumi.StringArrayInput
	// Private IP address of the spoke gateway created.
	PrivateIp pulumi.StringPtrInput
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrInput
	// Security group used for the spoke gateway.
	SecurityGroupId pulumi.StringPtrInput
	// Set to 'enabled' if this feature is desired.
	SingleAzHa pulumi.BoolPtrInput
	// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
	SingleIpSnat pulumi.BoolPtrInput
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringPtrInput
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayInput
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrInput
	// Public Subnet Info.
	Subnet pulumi.StringPtrInput
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayInput
	// A map of tags to assign to the spoke gateway.
	Tags pulumi.StringMapInput
	// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
	// example, 'transit-gw1,transit-gw2'.
	//
	// Deprecated: Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead.
	TransitGw pulumi.StringPtrInput
	// The IPSec tunnel down detection time for the Spoke Gateway.
	TunnelDetectionTime pulumi.IntPtrInput
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringPtrInput
	// Region of cloud provider.
	VpcReg pulumi.StringPtrInput
	// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone pulumi.StringPtrInput
}

func (SpokeGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*spokeGatewayState)(nil)).Elem()
}

type spokeGatewayArgs struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName string `pulumi:"accountName"`
	// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
	// this gateway.
	AllocateNewEip *bool `pulumi:"allocateNewEip"`
	// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
	ApprovedLearnedCidrs []string `pulumi:"approvedLearnedCidrs"`
	// Availability domain for OCI.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
	AzureEipNameResourceGroup *string `pulumi:"azureEipNameResourceGroup"`
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
	BgpEcmp *bool `pulumi:"bgpEcmp"`
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime *int `pulumi:"bgpHoldTime"`
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime *int `pulumi:"bgpPollingTime"`
	// Type of cloud service provider.
	CloudType int `pulumi:"cloudType"`
	// Customer managed key ID.
	CustomerManagedKeys *string `pulumi:"customerManagedKeys"`
	// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
	// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
	CustomizedSpokeVpcRoutes *string `pulumi:"customizedSpokeVpcRoutes"`
	// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
	DisableRoutePropagation *bool `pulumi:"disableRoutePropagation"`
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip *string `pulumi:"eip"`
	// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
	EnableActiveStandby *bool `pulumi:"enableActiveStandby"`
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive *bool `pulumi:"enableActiveStandbyPreemptive"`
	// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
	EnableAutoAdvertiseS2cCidrs *bool `pulumi:"enableAutoAdvertiseS2cCidrs"`
	// Enable BGP. Default: false.
	EnableBgp *bool `pulumi:"enableBgp"`
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume *bool `pulumi:"enableEncryptVolume"`
	// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame *bool `pulumi:"enableJumboFrame"`
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval *bool `pulumi:"enableLearnedCidrsApproval"`
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
	// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets *bool `pulumi:"enableMonitorGatewaySubnets"`
	// Enable private OOB.
	EnablePrivateOob *bool `pulumi:"enablePrivateOob"`
	// Config Private VPC Default Route.
	EnablePrivateVpcDefaultRoute *bool `pulumi:"enablePrivateVpcDefaultRoute"`
	// Skip Public Route Table Update.
	EnableSkipPublicRouteTableUpdate *bool `pulumi:"enableSkipPublicRouteTableUpdate"`
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance *bool `pulumi:"enableSpotInstance"`
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer *bool `pulumi:"enableVpcDnsServer"`
	// Fault domain for OCI.
	FaultDomain *string `pulumi:"faultDomain"`
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
	// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
	// this spoke gateway only.
	FilteredSpokeVpcRoutes *string `pulumi:"filteredSpokeVpcRoutes"`
	// Name of the gateway which is going to be created.
	GwName string `pulumi:"gwName"`
	// Size of the gateway instance.
	GwSize string `pulumi:"gwSize"`
	// HA availability domain for OCI.
	HaAvailabilityDomain *string `pulumi:"haAvailabilityDomain"`
	// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
	HaAzureEipNameResourceGroup *string `pulumi:"haAzureEipNameResourceGroup"`
	// Public IP address that you want assigned to the HA Spoke Gateway.
	HaEip *string `pulumi:"haEip"`
	// HA fault domain for OCI.
	HaFaultDomain *string `pulumi:"haFaultDomain"`
	// HA Gateway Size.
	HaGwSize *string `pulumi:"haGwSize"`
	// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
	// gateway to the specified version.
	HaImageVersion *string `pulumi:"haImageVersion"`
	// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
	// set.
	HaInsaneModeAz *string `pulumi:"haInsaneModeAz"`
	// OOB HA availability zone.
	HaOobAvailabilityZone *string `pulumi:"haOobAvailabilityZone"`
	// OOB HA management subnet.
	HaOobManagementSubnet *string `pulumi:"haOobManagementSubnet"`
	// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
	// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
	// the aviatrix_controller_config resource.
	HaSoftwareVersion *string `pulumi:"haSoftwareVersion"`
	// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
	// for GCP.
	HaSubnet *string `pulumi:"haSubnet"`
	// HA Zone. Required if enabling HA for GCP. Optional for Azure.
	HaZone *string `pulumi:"haZone"`
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion *string `pulumi:"imageVersion"`
	// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
	// all advertised routes from this VPC.
	IncludedAdvertisedSpokeRoutes *string `pulumi:"includedAdvertisedSpokeRoutes"`
	// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
	// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
	InsaneMode *bool `pulumi:"insaneMode"`
	// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
	InsaneModeAz *string `pulumi:"insaneModeAz"`
	// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
	// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
	// 'gateway'.
	LearnedCidrsApprovalMode *string `pulumi:"learnedCidrsApprovalMode"`
	// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
	LocalAsNumber *string `pulumi:"localAsNumber"`
	// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
	// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
	// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
	ManageTransitGatewayAttachment *bool `pulumi:"manageTransitGatewayAttachment"`
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists []string `pulumi:"monitorExcludeLists"`
	// OOB subnet availability zone.
	OobAvailabilityZone *string `pulumi:"oobAvailabilityZone"`
	// OOB management subnet.
	OobManagementSubnet *string `pulumi:"oobManagementSubnet"`
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
	// Gateway
	PrependAsPaths []string `pulumi:"prependAsPaths"`
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize *string `pulumi:"rxQueueSize"`
	// Set to 'enabled' if this feature is desired.
	SingleAzHa *bool `pulumi:"singleAzHa"`
	// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
	SingleIpSnat *bool `pulumi:"singleIpSnat"`
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs []string `pulumi:"spokeBgpManualAdvertiseCidrs"`
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice *string `pulumi:"spotPrice"`
	// Public Subnet Info.
	Subnet string `pulumi:"subnet"`
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists []string `pulumi:"tagLists"`
	// A map of tags to assign to the spoke gateway.
	Tags map[string]string `pulumi:"tags"`
	// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
	// example, 'transit-gw1,transit-gw2'.
	//
	// Deprecated: Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead.
	TransitGw *string `pulumi:"transitGw"`
	// The IPSec tunnel down detection time for the Spoke Gateway.
	TunnelDetectionTime *int `pulumi:"tunnelDetectionTime"`
	// VPC-ID/VNet-Name of cloud provider.
	VpcId string `pulumi:"vpcId"`
	// Region of cloud provider.
	VpcReg string `pulumi:"vpcReg"`
	// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a SpokeGateway resource.
type SpokeGatewayArgs struct {
	// This parameter represents the name of a Cloud-Account in Aviatrix controller.
	AccountName pulumi.StringInput
	// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
	// this gateway.
	AllocateNewEip pulumi.BoolPtrInput
	// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
	ApprovedLearnedCidrs pulumi.StringArrayInput
	// Availability domain for OCI.
	AvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
	AzureEipNameResourceGroup pulumi.StringPtrInput
	// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
	BgpEcmp pulumi.BoolPtrInput
	// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
	BgpHoldTime pulumi.IntPtrInput
	// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
	BgpPollingTime pulumi.IntPtrInput
	// Type of cloud service provider.
	CloudType pulumi.IntInput
	// Customer managed key ID.
	CustomerManagedKeys pulumi.StringPtrInput
	// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
	// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
	CustomizedSpokeVpcRoutes pulumi.StringPtrInput
	// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
	DisableRoutePropagation pulumi.BoolPtrInput
	// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
	Eip pulumi.StringPtrInput
	// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
	EnableActiveStandby pulumi.BoolPtrInput
	// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
	EnableActiveStandbyPreemptive pulumi.BoolPtrInput
	// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
	EnableAutoAdvertiseS2cCidrs pulumi.BoolPtrInput
	// Enable BGP. Default: false.
	EnableBgp pulumi.BoolPtrInput
	// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
	EnableEncryptVolume pulumi.BoolPtrInput
	// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
	EnableJumboFrame pulumi.BoolPtrInput
	// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
	EnableLearnedCidrsApproval pulumi.BoolPtrInput
	// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
	// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
	EnableMonitorGatewaySubnets pulumi.BoolPtrInput
	// Enable private OOB.
	EnablePrivateOob pulumi.BoolPtrInput
	// Config Private VPC Default Route.
	EnablePrivateVpcDefaultRoute pulumi.BoolPtrInput
	// Skip Public Route Table Update.
	EnableSkipPublicRouteTableUpdate pulumi.BoolPtrInput
	// Enable spot instance. NOT supported for production deployment.
	EnableSpotInstance pulumi.BoolPtrInput
	// Enable vpc_dns_server for Gateway. Valid values: true, false.
	EnableVpcDnsServer pulumi.BoolPtrInput
	// Fault domain for OCI.
	FaultDomain pulumi.StringPtrInput
	// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
	// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
	// this spoke gateway only.
	FilteredSpokeVpcRoutes pulumi.StringPtrInput
	// Name of the gateway which is going to be created.
	GwName pulumi.StringInput
	// Size of the gateway instance.
	GwSize pulumi.StringInput
	// HA availability domain for OCI.
	HaAvailabilityDomain pulumi.StringPtrInput
	// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
	HaAzureEipNameResourceGroup pulumi.StringPtrInput
	// Public IP address that you want assigned to the HA Spoke Gateway.
	HaEip pulumi.StringPtrInput
	// HA fault domain for OCI.
	HaFaultDomain pulumi.StringPtrInput
	// HA Gateway Size.
	HaGwSize pulumi.StringPtrInput
	// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
	// gateway to the specified version.
	HaImageVersion pulumi.StringPtrInput
	// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
	// set.
	HaInsaneModeAz pulumi.StringPtrInput
	// OOB HA availability zone.
	HaOobAvailabilityZone pulumi.StringPtrInput
	// OOB HA management subnet.
	HaOobManagementSubnet pulumi.StringPtrInput
	// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
	// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
	// the aviatrix_controller_config resource.
	HaSoftwareVersion pulumi.StringPtrInput
	// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
	// for GCP.
	HaSubnet pulumi.StringPtrInput
	// HA Zone. Required if enabling HA for GCP. Optional for Azure.
	HaZone pulumi.StringPtrInput
	// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
	// to the specified version.
	ImageVersion pulumi.StringPtrInput
	// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
	// all advertised routes from this VPC.
	IncludedAdvertisedSpokeRoutes pulumi.StringPtrInput
	// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
	// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
	InsaneMode pulumi.BoolPtrInput
	// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
	InsaneModeAz pulumi.StringPtrInput
	// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
	// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
	// 'gateway'.
	LearnedCidrsApprovalMode pulumi.StringPtrInput
	// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
	LocalAsNumber pulumi.StringPtrInput
	// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
	// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
	// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
	ManageTransitGatewayAttachment pulumi.BoolPtrInput
	// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
	MonitorExcludeLists pulumi.StringArrayInput
	// OOB subnet availability zone.
	OobAvailabilityZone pulumi.StringPtrInput
	// OOB management subnet.
	OobManagementSubnet pulumi.StringPtrInput
	// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
	// Gateway
	PrependAsPaths pulumi.StringArrayInput
	// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
	RxQueueSize pulumi.StringPtrInput
	// Set to 'enabled' if this feature is desired.
	SingleAzHa pulumi.BoolPtrInput
	// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
	SingleIpSnat pulumi.BoolPtrInput
	// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
	// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
	// aviatrix_controller_config resource.
	SoftwareVersion pulumi.StringPtrInput
	// Intended CIDR list to be advertised to external BGP router.
	SpokeBgpManualAdvertiseCidrs pulumi.StringArrayInput
	// Price for spot instance. NOT supported for production deployment.
	SpotPrice pulumi.StringPtrInput
	// Public Subnet Info.
	Subnet pulumi.StringInput
	// Instance tag of cloud provider.
	//
	// Deprecated: Use tags instead.
	TagLists pulumi.StringArrayInput
	// A map of tags to assign to the spoke gateway.
	Tags pulumi.StringMapInput
	// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
	// example, 'transit-gw1,transit-gw2'.
	//
	// Deprecated: Please set `manage_transit_gateway_attachment` to false, and use the standalone aviatrix_spoke_transit_attachment resource instead.
	TransitGw pulumi.StringPtrInput
	// The IPSec tunnel down detection time for the Spoke Gateway.
	TunnelDetectionTime pulumi.IntPtrInput
	// VPC-ID/VNet-Name of cloud provider.
	VpcId pulumi.StringInput
	// Region of cloud provider.
	VpcReg pulumi.StringInput
	// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
	Zone pulumi.StringPtrInput
}

func (SpokeGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spokeGatewayArgs)(nil)).Elem()
}

type SpokeGatewayInput interface {
	pulumi.Input

	ToSpokeGatewayOutput() SpokeGatewayOutput
	ToSpokeGatewayOutputWithContext(ctx context.Context) SpokeGatewayOutput
}

func (*SpokeGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeGateway)(nil)).Elem()
}

func (i *SpokeGateway) ToSpokeGatewayOutput() SpokeGatewayOutput {
	return i.ToSpokeGatewayOutputWithContext(context.Background())
}

func (i *SpokeGateway) ToSpokeGatewayOutputWithContext(ctx context.Context) SpokeGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeGatewayOutput)
}

// SpokeGatewayArrayInput is an input type that accepts SpokeGatewayArray and SpokeGatewayArrayOutput values.
// You can construct a concrete instance of `SpokeGatewayArrayInput` via:
//
//          SpokeGatewayArray{ SpokeGatewayArgs{...} }
type SpokeGatewayArrayInput interface {
	pulumi.Input

	ToSpokeGatewayArrayOutput() SpokeGatewayArrayOutput
	ToSpokeGatewayArrayOutputWithContext(context.Context) SpokeGatewayArrayOutput
}

type SpokeGatewayArray []SpokeGatewayInput

func (SpokeGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpokeGateway)(nil)).Elem()
}

func (i SpokeGatewayArray) ToSpokeGatewayArrayOutput() SpokeGatewayArrayOutput {
	return i.ToSpokeGatewayArrayOutputWithContext(context.Background())
}

func (i SpokeGatewayArray) ToSpokeGatewayArrayOutputWithContext(ctx context.Context) SpokeGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeGatewayArrayOutput)
}

// SpokeGatewayMapInput is an input type that accepts SpokeGatewayMap and SpokeGatewayMapOutput values.
// You can construct a concrete instance of `SpokeGatewayMapInput` via:
//
//          SpokeGatewayMap{ "key": SpokeGatewayArgs{...} }
type SpokeGatewayMapInput interface {
	pulumi.Input

	ToSpokeGatewayMapOutput() SpokeGatewayMapOutput
	ToSpokeGatewayMapOutputWithContext(context.Context) SpokeGatewayMapOutput
}

type SpokeGatewayMap map[string]SpokeGatewayInput

func (SpokeGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpokeGateway)(nil)).Elem()
}

func (i SpokeGatewayMap) ToSpokeGatewayMapOutput() SpokeGatewayMapOutput {
	return i.ToSpokeGatewayMapOutputWithContext(context.Background())
}

func (i SpokeGatewayMap) ToSpokeGatewayMapOutputWithContext(ctx context.Context) SpokeGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpokeGatewayMapOutput)
}

type SpokeGatewayOutput struct{ *pulumi.OutputState }

func (SpokeGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpokeGateway)(nil)).Elem()
}

func (o SpokeGatewayOutput) ToSpokeGatewayOutput() SpokeGatewayOutput {
	return o
}

func (o SpokeGatewayOutput) ToSpokeGatewayOutputWithContext(ctx context.Context) SpokeGatewayOutput {
	return o
}

type SpokeGatewayArrayOutput struct{ *pulumi.OutputState }

func (SpokeGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpokeGateway)(nil)).Elem()
}

func (o SpokeGatewayArrayOutput) ToSpokeGatewayArrayOutput() SpokeGatewayArrayOutput {
	return o
}

func (o SpokeGatewayArrayOutput) ToSpokeGatewayArrayOutputWithContext(ctx context.Context) SpokeGatewayArrayOutput {
	return o
}

func (o SpokeGatewayArrayOutput) Index(i pulumi.IntInput) SpokeGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpokeGateway {
		return vs[0].([]*SpokeGateway)[vs[1].(int)]
	}).(SpokeGatewayOutput)
}

type SpokeGatewayMapOutput struct{ *pulumi.OutputState }

func (SpokeGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpokeGateway)(nil)).Elem()
}

func (o SpokeGatewayMapOutput) ToSpokeGatewayMapOutput() SpokeGatewayMapOutput {
	return o
}

func (o SpokeGatewayMapOutput) ToSpokeGatewayMapOutputWithContext(ctx context.Context) SpokeGatewayMapOutput {
	return o
}

func (o SpokeGatewayMapOutput) MapIndex(k pulumi.StringInput) SpokeGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpokeGateway {
		return vs[0].(map[string]*SpokeGateway)[vs[1].(string)]
	}).(SpokeGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeGatewayInput)(nil)).Elem(), &SpokeGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeGatewayArrayInput)(nil)).Elem(), SpokeGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpokeGatewayMapInput)(nil)).Elem(), SpokeGatewayMap{})
	pulumi.RegisterOutputType(SpokeGatewayOutput{})
	pulumi.RegisterOutputType(SpokeGatewayArrayOutput{})
	pulumi.RegisterOutputType(SpokeGatewayMapOutput{})
}
