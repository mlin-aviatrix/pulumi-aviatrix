// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class TransitGateway extends pulumi.CustomResource {
    /**
     * Get an existing TransitGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitGatewayState, opts?: pulumi.CustomResourceOptions): TransitGateway {
        return new TransitGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/transitGateway:TransitGateway';

    /**
     * Returns true if the given object is an instance of TransitGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGateway.__pulumiType;
    }

    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
     * this gateway.
     */
    public readonly allocateNewEip!: pulumi.Output<boolean | undefined>;
    /**
     * Approved learned CIDRs. Available as of provider version R2.21+.
     */
    public readonly approvedLearnedCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Availability domain for OCI.
     */
    public readonly availabilityDomain!: pulumi.Output<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
     */
    public readonly azureEipNameResourceGroup!: pulumi.Output<string>;
    /**
     * Enable Equal Cost Multi Path (ECMP) routing for the next hop.
     */
    public readonly bgpEcmp!: pulumi.Output<boolean | undefined>;
    /**
     * BGP Hold Time.
     */
    public readonly bgpHoldTime!: pulumi.Output<number | undefined>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP Transit.
     */
    public readonly bgpLanInterfaces!: pulumi.Output<outputs.TransitGatewayBgpLanInterface[] | undefined>;
    /**
     * List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as
     * of provider version R2.21.0+.
     */
    public /*out*/ readonly bgpLanIpLists!: pulumi.Output<string[]>;
    /**
     * Intended CIDR list to be advertised to external bgp router.
     */
    public readonly bgpManualSpokeAdvertiseCidrs!: pulumi.Output<string | undefined>;
    /**
     * BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
     */
    public readonly bgpPollingTime!: pulumi.Output<string | undefined>;
    /**
     * Instance ID of the transit gateway.
     */
    public /*out*/ readonly cloudInstanceId!: pulumi.Output<string>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS.
     */
    public readonly cloudType!: pulumi.Output<number>;
    /**
     * Specify Connected Transit status.
     */
    public readonly connectedTransit!: pulumi.Output<boolean | undefined>;
    /**
     * Customer managed key ID.
     */
    public readonly customerManagedKeys!: pulumi.Output<string | undefined>;
    /**
     * A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
     * routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
     * transit gateway.
     */
    public readonly customizedSpokeVpcRoutes!: pulumi.Output<string | undefined>;
    /**
     * A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
     * routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
     * management access for a transit firenet gateway must be enabled.
     */
    public readonly customizedTransitVpcRoutes!: pulumi.Output<string[] | undefined>;
    /**
     * Required when allocate_new_eip is false. It uses specified EIP for this gateway.
     */
    public readonly eip!: pulumi.Output<string>;
    /**
     * Enables Active-Standby Mode, available only with HA enabled.
     */
    public readonly enableActiveStandby!: pulumi.Output<boolean | undefined>;
    /**
     * Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
     */
    public readonly enableActiveStandbyPreemptive!: pulumi.Output<boolean | undefined>;
    /**
     * Switch to Enable/Disable advertise transit VPC network CIDR.
     */
    public readonly enableAdvertiseTransitCidr!: pulumi.Output<boolean | undefined>;
    /**
     * Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
     * (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
     */
    public readonly enableBgpOverLan!: pulumi.Output<boolean | undefined>;
    /**
     * Specify whether to enable egress transit firenet interfaces or not.
     */
    public readonly enableEgressTransitFirenet!: pulumi.Output<boolean | undefined>;
    /**
     * Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
     * value: false.
     */
    public readonly enableEncryptVolume!: pulumi.Output<boolean | undefined>;
    /**
     * Specify whether to enable firenet interfaces or not.
     */
    public readonly enableFirenet!: pulumi.Output<boolean | undefined>;
    /**
     * Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
     * are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
     * us-west-2 and us-east-1. Valid values: true or false. Default value: false.
     */
    public readonly enableGatewayLoadBalancer!: pulumi.Output<boolean | undefined>;
    /**
     * Sign of readiness for TGW connection.
     */
    public readonly enableHybridConnection!: pulumi.Output<boolean | undefined>;
    /**
     * Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
     */
    public readonly enableJumboFrame!: pulumi.Output<boolean | undefined>;
    /**
     * Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
     */
    public readonly enableLearnedCidrsApproval!: pulumi.Output<boolean | undefined>;
    /**
     * Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
     * cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
     */
    public readonly enableMonitorGatewaySubnets!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Multi-tier Transit mode on transit gateway.
     */
    public readonly enableMultiTierTransit!: pulumi.Output<boolean | undefined>;
    /**
     * Enable private OOB.
     */
    public readonly enablePrivateOob!: pulumi.Output<boolean | undefined>;
    /**
     * Enable S2C receive packet CPU re-balancing on transit gateway.
     */
    public readonly enableS2cRxBalancing!: pulumi.Output<boolean | undefined>;
    /**
     * Enable segmentation to allow association of transit gateway to security domains.
     */
    public readonly enableSegmentation!: pulumi.Output<boolean | undefined>;
    /**
     * Enable spot instance. NOT supported for production deployment.
     */
    public readonly enableSpotInstance!: pulumi.Output<boolean | undefined>;
    /**
     * Specify whether to enable transit firenet interfaces or not.
     */
    public readonly enableTransitFirenet!: pulumi.Output<boolean | undefined>;
    /**
     * Enable summarize CIDR to TGW.
     */
    public readonly enableTransitSummarizeCidrToTgw!: pulumi.Output<boolean | undefined>;
    /**
     * Enable vpc_dns_server for Gateway. Valid values: true, false.
     */
    public readonly enableVpcDnsServer!: pulumi.Output<boolean | undefined>;
    /**
     * A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
     * the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
     */
    public readonly excludedAdvertisedSpokeRoutes!: pulumi.Output<string | undefined>;
    /**
     * Fault domain for OCI.
     */
    public readonly faultDomain!: pulumi.Output<string>;
    /**
     * A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
     * it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
     * spoke gateways attached to this transit gateway.
     */
    public readonly filteredSpokeVpcRoutes!: pulumi.Output<string | undefined>;
    /**
     * Name of the gateway which is going to be created.
     */
    public readonly gwName!: pulumi.Output<string>;
    /**
     * Size of the gateway instance.
     */
    public readonly gwSize!: pulumi.Output<string>;
    /**
     * HA availability domain for OCI.
     */
    public readonly haAvailabilityDomain!: pulumi.Output<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
     */
    public readonly haAzureEipNameResourceGroup!: pulumi.Output<string>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP HA Transit.
     */
    public readonly haBgpLanInterfaces!: pulumi.Output<outputs.TransitGatewayHaBgpLanInterface[] | undefined>;
    /**
     * List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available
     * as of provider version R2.21.0+.
     */
    public /*out*/ readonly haBgpLanIpLists!: pulumi.Output<string[]>;
    /**
     * Cloud instance ID of HA transit gateway.
     */
    public /*out*/ readonly haCloudInstanceId!: pulumi.Output<string>;
    /**
     * Public IP address that you want assigned to the HA Transit Gateway.
     */
    public readonly haEip!: pulumi.Output<string>;
    /**
     * HA fault domain for OCI.
     */
    public readonly haFaultDomain!: pulumi.Output<string>;
    /**
     * Aviatrix transit gateway unique name of HA transit gateway.
     */
    public /*out*/ readonly haGwName!: pulumi.Output<string>;
    /**
     * HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
     */
    public readonly haGwSize!: pulumi.Output<string | undefined>;
    /**
     * ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
     * gateway to the specified version.
     */
    public readonly haImageVersion!: pulumi.Output<string>;
    /**
     * AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
     * is set.
     */
    public readonly haInsaneModeAz!: pulumi.Output<string | undefined>;
    /**
     * Transit gateway lan interface cidr for the HA gateway.
     */
    public /*out*/ readonly haLanInterfaceCidr!: pulumi.Output<string>;
    /**
     * OOB HA availability zone.
     */
    public readonly haOobAvailabilityZone!: pulumi.Output<string | undefined>;
    /**
     * OOB HA management subnet.
     */
    public readonly haOobManagementSubnet!: pulumi.Output<string | undefined>;
    /**
     * Private IP address of HA transit gateway.
     */
    public /*out*/ readonly haPrivateIp!: pulumi.Output<string>;
    /**
     * HA security group used for the transit gateway.
     */
    public /*out*/ readonly haSecurityGroupId!: pulumi.Output<string>;
    /**
     * ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
     * the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
     * the aviatrix_controller_config resource.
     */
    public readonly haSoftwareVersion!: pulumi.Output<string>;
    /**
     * HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
     * gateway.
     */
    public readonly haSubnet!: pulumi.Output<string | undefined>;
    /**
     * HA Zone. Required if enabling HA for GCP. Optional for Azure.
     */
    public readonly haZone!: pulumi.Output<string | undefined>;
    /**
     * image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
     * to the specified version.
     */
    public readonly imageVersion!: pulumi.Output<string>;
    /**
     * Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
     * is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
     */
    public readonly insaneMode!: pulumi.Output<boolean | undefined>;
    /**
     * AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
     */
    public readonly insaneModeAz!: pulumi.Output<string | undefined>;
    /**
     * Transit gateway lan interface cidr.
     */
    public /*out*/ readonly lanInterfaceCidr!: pulumi.Output<string>;
    /**
     * LAN Private Subnet. Only used for GCP Transit FireNet.
     */
    public readonly lanPrivateSubnet!: pulumi.Output<string | undefined>;
    /**
     * LAN VPC ID. Only used for GCP Transit FireNet.
     */
    public readonly lanVpcId!: pulumi.Output<string | undefined>;
    /**
     * Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
     * 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
     * on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
     * connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
     */
    public readonly learnedCidrsApprovalMode!: pulumi.Output<string | undefined>;
    /**
     * Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
     */
    public readonly localAsNumber!: pulumi.Output<string>;
    /**
     * A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
     */
    public readonly monitorExcludeLists!: pulumi.Output<string[] | undefined>;
    /**
     * OOB subnet availability zone.
     */
    public readonly oobAvailabilityZone!: pulumi.Output<string | undefined>;
    /**
     * OOB management subnet.
     */
    public readonly oobManagementSubnet!: pulumi.Output<string | undefined>;
    /**
     * List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
     */
    public readonly prependAsPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Private IP address of the transit gateway created.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
     */
    public readonly rxQueueSize!: pulumi.Output<string | undefined>;
    /**
     * Security group used for the transit gateway.
     */
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    public readonly singleAzHa!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable Source NAT feature in 'single_ip' mode for this container.
     */
    public readonly singleIpSnat!: pulumi.Output<boolean | undefined>;
    /**
     * software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
     * gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
     * aviatrix_controller_config resource.
     */
    public readonly softwareVersion!: pulumi.Output<string>;
    /**
     * Price for spot instance. NOT supported for production deployment.
     */
    public readonly spotPrice!: pulumi.Output<string | undefined>;
    /**
     * Public Subnet Name.
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * Instance tag of cloud provider.
     *
     * @deprecated Use tags instead.
     */
    public readonly tagLists!: pulumi.Output<string[] | undefined>;
    /**
     * A map of tags to assign to the transit gateway.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The IPSec tunnel down detection time for the transit gateway.
     */
    public readonly tunnelDetectionTime!: pulumi.Output<number>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * Region of cloud provider.
     */
    public readonly vpcReg!: pulumi.Output<string>;
    /**
     * Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a TransitGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitGatewayArgs | TransitGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitGatewayState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["allocateNewEip"] = state ? state.allocateNewEip : undefined;
            resourceInputs["approvedLearnedCidrs"] = state ? state.approvedLearnedCidrs : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["azureEipNameResourceGroup"] = state ? state.azureEipNameResourceGroup : undefined;
            resourceInputs["bgpEcmp"] = state ? state.bgpEcmp : undefined;
            resourceInputs["bgpHoldTime"] = state ? state.bgpHoldTime : undefined;
            resourceInputs["bgpLanInterfaces"] = state ? state.bgpLanInterfaces : undefined;
            resourceInputs["bgpLanIpLists"] = state ? state.bgpLanIpLists : undefined;
            resourceInputs["bgpManualSpokeAdvertiseCidrs"] = state ? state.bgpManualSpokeAdvertiseCidrs : undefined;
            resourceInputs["bgpPollingTime"] = state ? state.bgpPollingTime : undefined;
            resourceInputs["cloudInstanceId"] = state ? state.cloudInstanceId : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["connectedTransit"] = state ? state.connectedTransit : undefined;
            resourceInputs["customerManagedKeys"] = state ? state.customerManagedKeys : undefined;
            resourceInputs["customizedSpokeVpcRoutes"] = state ? state.customizedSpokeVpcRoutes : undefined;
            resourceInputs["customizedTransitVpcRoutes"] = state ? state.customizedTransitVpcRoutes : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["enableActiveStandby"] = state ? state.enableActiveStandby : undefined;
            resourceInputs["enableActiveStandbyPreemptive"] = state ? state.enableActiveStandbyPreemptive : undefined;
            resourceInputs["enableAdvertiseTransitCidr"] = state ? state.enableAdvertiseTransitCidr : undefined;
            resourceInputs["enableBgpOverLan"] = state ? state.enableBgpOverLan : undefined;
            resourceInputs["enableEgressTransitFirenet"] = state ? state.enableEgressTransitFirenet : undefined;
            resourceInputs["enableEncryptVolume"] = state ? state.enableEncryptVolume : undefined;
            resourceInputs["enableFirenet"] = state ? state.enableFirenet : undefined;
            resourceInputs["enableGatewayLoadBalancer"] = state ? state.enableGatewayLoadBalancer : undefined;
            resourceInputs["enableHybridConnection"] = state ? state.enableHybridConnection : undefined;
            resourceInputs["enableJumboFrame"] = state ? state.enableJumboFrame : undefined;
            resourceInputs["enableLearnedCidrsApproval"] = state ? state.enableLearnedCidrsApproval : undefined;
            resourceInputs["enableMonitorGatewaySubnets"] = state ? state.enableMonitorGatewaySubnets : undefined;
            resourceInputs["enableMultiTierTransit"] = state ? state.enableMultiTierTransit : undefined;
            resourceInputs["enablePrivateOob"] = state ? state.enablePrivateOob : undefined;
            resourceInputs["enableS2cRxBalancing"] = state ? state.enableS2cRxBalancing : undefined;
            resourceInputs["enableSegmentation"] = state ? state.enableSegmentation : undefined;
            resourceInputs["enableSpotInstance"] = state ? state.enableSpotInstance : undefined;
            resourceInputs["enableTransitFirenet"] = state ? state.enableTransitFirenet : undefined;
            resourceInputs["enableTransitSummarizeCidrToTgw"] = state ? state.enableTransitSummarizeCidrToTgw : undefined;
            resourceInputs["enableVpcDnsServer"] = state ? state.enableVpcDnsServer : undefined;
            resourceInputs["excludedAdvertisedSpokeRoutes"] = state ? state.excludedAdvertisedSpokeRoutes : undefined;
            resourceInputs["faultDomain"] = state ? state.faultDomain : undefined;
            resourceInputs["filteredSpokeVpcRoutes"] = state ? state.filteredSpokeVpcRoutes : undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["gwSize"] = state ? state.gwSize : undefined;
            resourceInputs["haAvailabilityDomain"] = state ? state.haAvailabilityDomain : undefined;
            resourceInputs["haAzureEipNameResourceGroup"] = state ? state.haAzureEipNameResourceGroup : undefined;
            resourceInputs["haBgpLanInterfaces"] = state ? state.haBgpLanInterfaces : undefined;
            resourceInputs["haBgpLanIpLists"] = state ? state.haBgpLanIpLists : undefined;
            resourceInputs["haCloudInstanceId"] = state ? state.haCloudInstanceId : undefined;
            resourceInputs["haEip"] = state ? state.haEip : undefined;
            resourceInputs["haFaultDomain"] = state ? state.haFaultDomain : undefined;
            resourceInputs["haGwName"] = state ? state.haGwName : undefined;
            resourceInputs["haGwSize"] = state ? state.haGwSize : undefined;
            resourceInputs["haImageVersion"] = state ? state.haImageVersion : undefined;
            resourceInputs["haInsaneModeAz"] = state ? state.haInsaneModeAz : undefined;
            resourceInputs["haLanInterfaceCidr"] = state ? state.haLanInterfaceCidr : undefined;
            resourceInputs["haOobAvailabilityZone"] = state ? state.haOobAvailabilityZone : undefined;
            resourceInputs["haOobManagementSubnet"] = state ? state.haOobManagementSubnet : undefined;
            resourceInputs["haPrivateIp"] = state ? state.haPrivateIp : undefined;
            resourceInputs["haSecurityGroupId"] = state ? state.haSecurityGroupId : undefined;
            resourceInputs["haSoftwareVersion"] = state ? state.haSoftwareVersion : undefined;
            resourceInputs["haSubnet"] = state ? state.haSubnet : undefined;
            resourceInputs["haZone"] = state ? state.haZone : undefined;
            resourceInputs["imageVersion"] = state ? state.imageVersion : undefined;
            resourceInputs["insaneMode"] = state ? state.insaneMode : undefined;
            resourceInputs["insaneModeAz"] = state ? state.insaneModeAz : undefined;
            resourceInputs["lanInterfaceCidr"] = state ? state.lanInterfaceCidr : undefined;
            resourceInputs["lanPrivateSubnet"] = state ? state.lanPrivateSubnet : undefined;
            resourceInputs["lanVpcId"] = state ? state.lanVpcId : undefined;
            resourceInputs["learnedCidrsApprovalMode"] = state ? state.learnedCidrsApprovalMode : undefined;
            resourceInputs["localAsNumber"] = state ? state.localAsNumber : undefined;
            resourceInputs["monitorExcludeLists"] = state ? state.monitorExcludeLists : undefined;
            resourceInputs["oobAvailabilityZone"] = state ? state.oobAvailabilityZone : undefined;
            resourceInputs["oobManagementSubnet"] = state ? state.oobManagementSubnet : undefined;
            resourceInputs["prependAsPaths"] = state ? state.prependAsPaths : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["rxQueueSize"] = state ? state.rxQueueSize : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["singleAzHa"] = state ? state.singleAzHa : undefined;
            resourceInputs["singleIpSnat"] = state ? state.singleIpSnat : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["spotPrice"] = state ? state.spotPrice : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["tagLists"] = state ? state.tagLists : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tunnelDetectionTime"] = state ? state.tunnelDetectionTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcReg"] = state ? state.vpcReg : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as TransitGatewayArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.cloudType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudType'");
            }
            if ((!args || args.gwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName'");
            }
            if ((!args || args.gwSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwSize'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vpcReg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcReg'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["allocateNewEip"] = args ? args.allocateNewEip : undefined;
            resourceInputs["approvedLearnedCidrs"] = args ? args.approvedLearnedCidrs : undefined;
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["azureEipNameResourceGroup"] = args ? args.azureEipNameResourceGroup : undefined;
            resourceInputs["bgpEcmp"] = args ? args.bgpEcmp : undefined;
            resourceInputs["bgpHoldTime"] = args ? args.bgpHoldTime : undefined;
            resourceInputs["bgpLanInterfaces"] = args ? args.bgpLanInterfaces : undefined;
            resourceInputs["bgpManualSpokeAdvertiseCidrs"] = args ? args.bgpManualSpokeAdvertiseCidrs : undefined;
            resourceInputs["bgpPollingTime"] = args ? args.bgpPollingTime : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["connectedTransit"] = args ? args.connectedTransit : undefined;
            resourceInputs["customerManagedKeys"] = args ? args.customerManagedKeys : undefined;
            resourceInputs["customizedSpokeVpcRoutes"] = args ? args.customizedSpokeVpcRoutes : undefined;
            resourceInputs["customizedTransitVpcRoutes"] = args ? args.customizedTransitVpcRoutes : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["enableActiveStandby"] = args ? args.enableActiveStandby : undefined;
            resourceInputs["enableActiveStandbyPreemptive"] = args ? args.enableActiveStandbyPreemptive : undefined;
            resourceInputs["enableAdvertiseTransitCidr"] = args ? args.enableAdvertiseTransitCidr : undefined;
            resourceInputs["enableBgpOverLan"] = args ? args.enableBgpOverLan : undefined;
            resourceInputs["enableEgressTransitFirenet"] = args ? args.enableEgressTransitFirenet : undefined;
            resourceInputs["enableEncryptVolume"] = args ? args.enableEncryptVolume : undefined;
            resourceInputs["enableFirenet"] = args ? args.enableFirenet : undefined;
            resourceInputs["enableGatewayLoadBalancer"] = args ? args.enableGatewayLoadBalancer : undefined;
            resourceInputs["enableHybridConnection"] = args ? args.enableHybridConnection : undefined;
            resourceInputs["enableJumboFrame"] = args ? args.enableJumboFrame : undefined;
            resourceInputs["enableLearnedCidrsApproval"] = args ? args.enableLearnedCidrsApproval : undefined;
            resourceInputs["enableMonitorGatewaySubnets"] = args ? args.enableMonitorGatewaySubnets : undefined;
            resourceInputs["enableMultiTierTransit"] = args ? args.enableMultiTierTransit : undefined;
            resourceInputs["enablePrivateOob"] = args ? args.enablePrivateOob : undefined;
            resourceInputs["enableS2cRxBalancing"] = args ? args.enableS2cRxBalancing : undefined;
            resourceInputs["enableSegmentation"] = args ? args.enableSegmentation : undefined;
            resourceInputs["enableSpotInstance"] = args ? args.enableSpotInstance : undefined;
            resourceInputs["enableTransitFirenet"] = args ? args.enableTransitFirenet : undefined;
            resourceInputs["enableTransitSummarizeCidrToTgw"] = args ? args.enableTransitSummarizeCidrToTgw : undefined;
            resourceInputs["enableVpcDnsServer"] = args ? args.enableVpcDnsServer : undefined;
            resourceInputs["excludedAdvertisedSpokeRoutes"] = args ? args.excludedAdvertisedSpokeRoutes : undefined;
            resourceInputs["faultDomain"] = args ? args.faultDomain : undefined;
            resourceInputs["filteredSpokeVpcRoutes"] = args ? args.filteredSpokeVpcRoutes : undefined;
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["gwSize"] = args ? args.gwSize : undefined;
            resourceInputs["haAvailabilityDomain"] = args ? args.haAvailabilityDomain : undefined;
            resourceInputs["haAzureEipNameResourceGroup"] = args ? args.haAzureEipNameResourceGroup : undefined;
            resourceInputs["haBgpLanInterfaces"] = args ? args.haBgpLanInterfaces : undefined;
            resourceInputs["haEip"] = args ? args.haEip : undefined;
            resourceInputs["haFaultDomain"] = args ? args.haFaultDomain : undefined;
            resourceInputs["haGwSize"] = args ? args.haGwSize : undefined;
            resourceInputs["haImageVersion"] = args ? args.haImageVersion : undefined;
            resourceInputs["haInsaneModeAz"] = args ? args.haInsaneModeAz : undefined;
            resourceInputs["haOobAvailabilityZone"] = args ? args.haOobAvailabilityZone : undefined;
            resourceInputs["haOobManagementSubnet"] = args ? args.haOobManagementSubnet : undefined;
            resourceInputs["haSoftwareVersion"] = args ? args.haSoftwareVersion : undefined;
            resourceInputs["haSubnet"] = args ? args.haSubnet : undefined;
            resourceInputs["haZone"] = args ? args.haZone : undefined;
            resourceInputs["imageVersion"] = args ? args.imageVersion : undefined;
            resourceInputs["insaneMode"] = args ? args.insaneMode : undefined;
            resourceInputs["insaneModeAz"] = args ? args.insaneModeAz : undefined;
            resourceInputs["lanPrivateSubnet"] = args ? args.lanPrivateSubnet : undefined;
            resourceInputs["lanVpcId"] = args ? args.lanVpcId : undefined;
            resourceInputs["learnedCidrsApprovalMode"] = args ? args.learnedCidrsApprovalMode : undefined;
            resourceInputs["localAsNumber"] = args ? args.localAsNumber : undefined;
            resourceInputs["monitorExcludeLists"] = args ? args.monitorExcludeLists : undefined;
            resourceInputs["oobAvailabilityZone"] = args ? args.oobAvailabilityZone : undefined;
            resourceInputs["oobManagementSubnet"] = args ? args.oobManagementSubnet : undefined;
            resourceInputs["prependAsPaths"] = args ? args.prependAsPaths : undefined;
            resourceInputs["rxQueueSize"] = args ? args.rxQueueSize : undefined;
            resourceInputs["singleAzHa"] = args ? args.singleAzHa : undefined;
            resourceInputs["singleIpSnat"] = args ? args.singleIpSnat : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["spotPrice"] = args ? args.spotPrice : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["tagLists"] = args ? args.tagLists : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tunnelDetectionTime"] = args ? args.tunnelDetectionTime : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcReg"] = args ? args.vpcReg : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["bgpLanIpLists"] = undefined /*out*/;
            resourceInputs["cloudInstanceId"] = undefined /*out*/;
            resourceInputs["haBgpLanIpLists"] = undefined /*out*/;
            resourceInputs["haCloudInstanceId"] = undefined /*out*/;
            resourceInputs["haGwName"] = undefined /*out*/;
            resourceInputs["haLanInterfaceCidr"] = undefined /*out*/;
            resourceInputs["haPrivateIp"] = undefined /*out*/;
            resourceInputs["haSecurityGroupId"] = undefined /*out*/;
            resourceInputs["lanInterfaceCidr"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransitGateway resources.
 */
export interface TransitGatewayState {
    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    accountName?: pulumi.Input<string>;
    /**
     * If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
     * this gateway.
     */
    allocateNewEip?: pulumi.Input<boolean>;
    /**
     * Approved learned CIDRs. Available as of provider version R2.21+.
     */
    approvedLearnedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Availability domain for OCI.
     */
    availabilityDomain?: pulumi.Input<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
     */
    azureEipNameResourceGroup?: pulumi.Input<string>;
    /**
     * Enable Equal Cost Multi Path (ECMP) routing for the next hop.
     */
    bgpEcmp?: pulumi.Input<boolean>;
    /**
     * BGP Hold Time.
     */
    bgpHoldTime?: pulumi.Input<number>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP Transit.
     */
    bgpLanInterfaces?: pulumi.Input<pulumi.Input<inputs.TransitGatewayBgpLanInterface>[]>;
    /**
     * List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as
     * of provider version R2.21.0+.
     */
    bgpLanIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Intended CIDR list to be advertised to external bgp router.
     */
    bgpManualSpokeAdvertiseCidrs?: pulumi.Input<string>;
    /**
     * BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
     */
    bgpPollingTime?: pulumi.Input<string>;
    /**
     * Instance ID of the transit gateway.
     */
    cloudInstanceId?: pulumi.Input<string>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS.
     */
    cloudType?: pulumi.Input<number>;
    /**
     * Specify Connected Transit status.
     */
    connectedTransit?: pulumi.Input<boolean>;
    /**
     * Customer managed key ID.
     */
    customerManagedKeys?: pulumi.Input<string>;
    /**
     * A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
     * routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
     * transit gateway.
     */
    customizedSpokeVpcRoutes?: pulumi.Input<string>;
    /**
     * A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
     * routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
     * management access for a transit firenet gateway must be enabled.
     */
    customizedTransitVpcRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required when allocate_new_eip is false. It uses specified EIP for this gateway.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enables Active-Standby Mode, available only with HA enabled.
     */
    enableActiveStandby?: pulumi.Input<boolean>;
    /**
     * Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
     */
    enableActiveStandbyPreemptive?: pulumi.Input<boolean>;
    /**
     * Switch to Enable/Disable advertise transit VPC network CIDR.
     */
    enableAdvertiseTransitCidr?: pulumi.Input<boolean>;
    /**
     * Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
     * (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
     */
    enableBgpOverLan?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable egress transit firenet interfaces or not.
     */
    enableEgressTransitFirenet?: pulumi.Input<boolean>;
    /**
     * Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
     * value: false.
     */
    enableEncryptVolume?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable firenet interfaces or not.
     */
    enableFirenet?: pulumi.Input<boolean>;
    /**
     * Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
     * are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
     * us-west-2 and us-east-1. Valid values: true or false. Default value: false.
     */
    enableGatewayLoadBalancer?: pulumi.Input<boolean>;
    /**
     * Sign of readiness for TGW connection.
     */
    enableHybridConnection?: pulumi.Input<boolean>;
    /**
     * Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
     */
    enableJumboFrame?: pulumi.Input<boolean>;
    /**
     * Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
     */
    enableLearnedCidrsApproval?: pulumi.Input<boolean>;
    /**
     * Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
     * cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
     */
    enableMonitorGatewaySubnets?: pulumi.Input<boolean>;
    /**
     * Enable Multi-tier Transit mode on transit gateway.
     */
    enableMultiTierTransit?: pulumi.Input<boolean>;
    /**
     * Enable private OOB.
     */
    enablePrivateOob?: pulumi.Input<boolean>;
    /**
     * Enable S2C receive packet CPU re-balancing on transit gateway.
     */
    enableS2cRxBalancing?: pulumi.Input<boolean>;
    /**
     * Enable segmentation to allow association of transit gateway to security domains.
     */
    enableSegmentation?: pulumi.Input<boolean>;
    /**
     * Enable spot instance. NOT supported for production deployment.
     */
    enableSpotInstance?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable transit firenet interfaces or not.
     */
    enableTransitFirenet?: pulumi.Input<boolean>;
    /**
     * Enable summarize CIDR to TGW.
     */
    enableTransitSummarizeCidrToTgw?: pulumi.Input<boolean>;
    /**
     * Enable vpc_dns_server for Gateway. Valid values: true, false.
     */
    enableVpcDnsServer?: pulumi.Input<boolean>;
    /**
     * A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
     * the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
     */
    excludedAdvertisedSpokeRoutes?: pulumi.Input<string>;
    /**
     * Fault domain for OCI.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
     * it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
     * spoke gateways attached to this transit gateway.
     */
    filteredSpokeVpcRoutes?: pulumi.Input<string>;
    /**
     * Name of the gateway which is going to be created.
     */
    gwName?: pulumi.Input<string>;
    /**
     * Size of the gateway instance.
     */
    gwSize?: pulumi.Input<string>;
    /**
     * HA availability domain for OCI.
     */
    haAvailabilityDomain?: pulumi.Input<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
     */
    haAzureEipNameResourceGroup?: pulumi.Input<string>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP HA Transit.
     */
    haBgpLanInterfaces?: pulumi.Input<pulumi.Input<inputs.TransitGatewayHaBgpLanInterface>[]>;
    /**
     * List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available
     * as of provider version R2.21.0+.
     */
    haBgpLanIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud instance ID of HA transit gateway.
     */
    haCloudInstanceId?: pulumi.Input<string>;
    /**
     * Public IP address that you want assigned to the HA Transit Gateway.
     */
    haEip?: pulumi.Input<string>;
    /**
     * HA fault domain for OCI.
     */
    haFaultDomain?: pulumi.Input<string>;
    /**
     * Aviatrix transit gateway unique name of HA transit gateway.
     */
    haGwName?: pulumi.Input<string>;
    /**
     * HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
     */
    haGwSize?: pulumi.Input<string>;
    /**
     * ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
     * gateway to the specified version.
     */
    haImageVersion?: pulumi.Input<string>;
    /**
     * AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
     * is set.
     */
    haInsaneModeAz?: pulumi.Input<string>;
    /**
     * Transit gateway lan interface cidr for the HA gateway.
     */
    haLanInterfaceCidr?: pulumi.Input<string>;
    /**
     * OOB HA availability zone.
     */
    haOobAvailabilityZone?: pulumi.Input<string>;
    /**
     * OOB HA management subnet.
     */
    haOobManagementSubnet?: pulumi.Input<string>;
    /**
     * Private IP address of HA transit gateway.
     */
    haPrivateIp?: pulumi.Input<string>;
    /**
     * HA security group used for the transit gateway.
     */
    haSecurityGroupId?: pulumi.Input<string>;
    /**
     * ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
     * the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
     * the aviatrix_controller_config resource.
     */
    haSoftwareVersion?: pulumi.Input<string>;
    /**
     * HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
     * gateway.
     */
    haSubnet?: pulumi.Input<string>;
    /**
     * HA Zone. Required if enabling HA for GCP. Optional for Azure.
     */
    haZone?: pulumi.Input<string>;
    /**
     * image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
     * to the specified version.
     */
    imageVersion?: pulumi.Input<string>;
    /**
     * Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
     * is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
     */
    insaneMode?: pulumi.Input<boolean>;
    /**
     * AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
     */
    insaneModeAz?: pulumi.Input<string>;
    /**
     * Transit gateway lan interface cidr.
     */
    lanInterfaceCidr?: pulumi.Input<string>;
    /**
     * LAN Private Subnet. Only used for GCP Transit FireNet.
     */
    lanPrivateSubnet?: pulumi.Input<string>;
    /**
     * LAN VPC ID. Only used for GCP Transit FireNet.
     */
    lanVpcId?: pulumi.Input<string>;
    /**
     * Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
     * 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
     * on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
     * connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
     */
    learnedCidrsApprovalMode?: pulumi.Input<string>;
    /**
     * Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
     */
    localAsNumber?: pulumi.Input<string>;
    /**
     * A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
     */
    monitorExcludeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OOB subnet availability zone.
     */
    oobAvailabilityZone?: pulumi.Input<string>;
    /**
     * OOB management subnet.
     */
    oobManagementSubnet?: pulumi.Input<string>;
    /**
     * List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Private IP address of the transit gateway created.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
     */
    rxQueueSize?: pulumi.Input<string>;
    /**
     * Security group used for the transit gateway.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    singleAzHa?: pulumi.Input<boolean>;
    /**
     * Enable or disable Source NAT feature in 'single_ip' mode for this container.
     */
    singleIpSnat?: pulumi.Input<boolean>;
    /**
     * software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
     * gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
     * aviatrix_controller_config resource.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * Price for spot instance. NOT supported for production deployment.
     */
    spotPrice?: pulumi.Input<string>;
    /**
     * Public Subnet Name.
     */
    subnet?: pulumi.Input<string>;
    /**
     * Instance tag of cloud provider.
     *
     * @deprecated Use tags instead.
     */
    tagLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the transit gateway.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IPSec tunnel down detection time for the transit gateway.
     */
    tunnelDetectionTime?: pulumi.Input<number>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Region of cloud provider.
     */
    vpcReg?: pulumi.Input<string>;
    /**
     * Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransitGateway resource.
 */
export interface TransitGatewayArgs {
    /**
     * This parameter represents the name of a Cloud-Account in Aviatrix controller.
     */
    accountName: pulumi.Input<string>;
    /**
     * If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
     * this gateway.
     */
    allocateNewEip?: pulumi.Input<boolean>;
    /**
     * Approved learned CIDRs. Available as of provider version R2.21+.
     */
    approvedLearnedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Availability domain for OCI.
     */
    availabilityDomain?: pulumi.Input<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
     */
    azureEipNameResourceGroup?: pulumi.Input<string>;
    /**
     * Enable Equal Cost Multi Path (ECMP) routing for the next hop.
     */
    bgpEcmp?: pulumi.Input<boolean>;
    /**
     * BGP Hold Time.
     */
    bgpHoldTime?: pulumi.Input<number>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP Transit.
     */
    bgpLanInterfaces?: pulumi.Input<pulumi.Input<inputs.TransitGatewayBgpLanInterface>[]>;
    /**
     * Intended CIDR list to be advertised to external bgp router.
     */
    bgpManualSpokeAdvertiseCidrs?: pulumi.Input<string>;
    /**
     * BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
     */
    bgpPollingTime?: pulumi.Input<string>;
    /**
     * Type of cloud service provider, requires an integer value. Use 1 for AWS.
     */
    cloudType: pulumi.Input<number>;
    /**
     * Specify Connected Transit status.
     */
    connectedTransit?: pulumi.Input<boolean>;
    /**
     * Customer managed key ID.
     */
    customerManagedKeys?: pulumi.Input<string>;
    /**
     * A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
     * routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
     * transit gateway.
     */
    customizedSpokeVpcRoutes?: pulumi.Input<string>;
    /**
     * A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
     * routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
     * management access for a transit firenet gateway must be enabled.
     */
    customizedTransitVpcRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required when allocate_new_eip is false. It uses specified EIP for this gateway.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enables Active-Standby Mode, available only with HA enabled.
     */
    enableActiveStandby?: pulumi.Input<boolean>;
    /**
     * Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
     */
    enableActiveStandbyPreemptive?: pulumi.Input<boolean>;
    /**
     * Switch to Enable/Disable advertise transit VPC network CIDR.
     */
    enableAdvertiseTransitCidr?: pulumi.Input<boolean>;
    /**
     * Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
     * (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
     */
    enableBgpOverLan?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable egress transit firenet interfaces or not.
     */
    enableEgressTransitFirenet?: pulumi.Input<boolean>;
    /**
     * Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
     * value: false.
     */
    enableEncryptVolume?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable firenet interfaces or not.
     */
    enableFirenet?: pulumi.Input<boolean>;
    /**
     * Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
     * are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
     * us-west-2 and us-east-1. Valid values: true or false. Default value: false.
     */
    enableGatewayLoadBalancer?: pulumi.Input<boolean>;
    /**
     * Sign of readiness for TGW connection.
     */
    enableHybridConnection?: pulumi.Input<boolean>;
    /**
     * Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
     */
    enableJumboFrame?: pulumi.Input<boolean>;
    /**
     * Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
     */
    enableLearnedCidrsApproval?: pulumi.Input<boolean>;
    /**
     * Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
     * cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
     */
    enableMonitorGatewaySubnets?: pulumi.Input<boolean>;
    /**
     * Enable Multi-tier Transit mode on transit gateway.
     */
    enableMultiTierTransit?: pulumi.Input<boolean>;
    /**
     * Enable private OOB.
     */
    enablePrivateOob?: pulumi.Input<boolean>;
    /**
     * Enable S2C receive packet CPU re-balancing on transit gateway.
     */
    enableS2cRxBalancing?: pulumi.Input<boolean>;
    /**
     * Enable segmentation to allow association of transit gateway to security domains.
     */
    enableSegmentation?: pulumi.Input<boolean>;
    /**
     * Enable spot instance. NOT supported for production deployment.
     */
    enableSpotInstance?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable transit firenet interfaces or not.
     */
    enableTransitFirenet?: pulumi.Input<boolean>;
    /**
     * Enable summarize CIDR to TGW.
     */
    enableTransitSummarizeCidrToTgw?: pulumi.Input<boolean>;
    /**
     * Enable vpc_dns_server for Gateway. Valid values: true, false.
     */
    enableVpcDnsServer?: pulumi.Input<boolean>;
    /**
     * A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
     * the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
     */
    excludedAdvertisedSpokeRoutes?: pulumi.Input<string>;
    /**
     * Fault domain for OCI.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
     * it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
     * spoke gateways attached to this transit gateway.
     */
    filteredSpokeVpcRoutes?: pulumi.Input<string>;
    /**
     * Name of the gateway which is going to be created.
     */
    gwName: pulumi.Input<string>;
    /**
     * Size of the gateway instance.
     */
    gwSize: pulumi.Input<string>;
    /**
     * HA availability domain for OCI.
     */
    haAvailabilityDomain?: pulumi.Input<string>;
    /**
     * The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
     */
    haAzureEipNameResourceGroup?: pulumi.Input<string>;
    /**
     * Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
     * for GCP HA Transit.
     */
    haBgpLanInterfaces?: pulumi.Input<pulumi.Input<inputs.TransitGatewayHaBgpLanInterface>[]>;
    /**
     * Public IP address that you want assigned to the HA Transit Gateway.
     */
    haEip?: pulumi.Input<string>;
    /**
     * HA fault domain for OCI.
     */
    haFaultDomain?: pulumi.Input<string>;
    /**
     * HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
     */
    haGwSize?: pulumi.Input<string>;
    /**
     * ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
     * gateway to the specified version.
     */
    haImageVersion?: pulumi.Input<string>;
    /**
     * AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
     * is set.
     */
    haInsaneModeAz?: pulumi.Input<string>;
    /**
     * OOB HA availability zone.
     */
    haOobAvailabilityZone?: pulumi.Input<string>;
    /**
     * OOB HA management subnet.
     */
    haOobManagementSubnet?: pulumi.Input<string>;
    /**
     * ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
     * the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
     * the aviatrix_controller_config resource.
     */
    haSoftwareVersion?: pulumi.Input<string>;
    /**
     * HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
     * gateway.
     */
    haSubnet?: pulumi.Input<string>;
    /**
     * HA Zone. Required if enabling HA for GCP. Optional for Azure.
     */
    haZone?: pulumi.Input<string>;
    /**
     * image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
     * to the specified version.
     */
    imageVersion?: pulumi.Input<string>;
    /**
     * Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
     * is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
     */
    insaneMode?: pulumi.Input<boolean>;
    /**
     * AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
     */
    insaneModeAz?: pulumi.Input<string>;
    /**
     * LAN Private Subnet. Only used for GCP Transit FireNet.
     */
    lanPrivateSubnet?: pulumi.Input<string>;
    /**
     * LAN VPC ID. Only used for GCP Transit FireNet.
     */
    lanVpcId?: pulumi.Input<string>;
    /**
     * Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
     * 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
     * on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
     * connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
     */
    learnedCidrsApprovalMode?: pulumi.Input<string>;
    /**
     * Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
     */
    localAsNumber?: pulumi.Input<string>;
    /**
     * A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
     */
    monitorExcludeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OOB subnet availability zone.
     */
    oobAvailabilityZone?: pulumi.Input<string>;
    /**
     * OOB management subnet.
     */
    oobManagementSubnet?: pulumi.Input<string>;
    /**
     * List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
     */
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
     */
    rxQueueSize?: pulumi.Input<string>;
    /**
     * Set to 'enabled' if this feature is desired.
     */
    singleAzHa?: pulumi.Input<boolean>;
    /**
     * Enable or disable Source NAT feature in 'single_ip' mode for this container.
     */
    singleIpSnat?: pulumi.Input<boolean>;
    /**
     * software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
     * gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
     * aviatrix_controller_config resource.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * Price for spot instance. NOT supported for production deployment.
     */
    spotPrice?: pulumi.Input<string>;
    /**
     * Public Subnet Name.
     */
    subnet: pulumi.Input<string>;
    /**
     * Instance tag of cloud provider.
     *
     * @deprecated Use tags instead.
     */
    tagLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the transit gateway.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IPSec tunnel down detection time for the transit gateway.
     */
    tunnelDetectionTime?: pulumi.Input<number>;
    /**
     * VPC-ID/VNet-Name of cloud provider.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Region of cloud provider.
     */
    vpcReg: pulumi.Input<string>;
    /**
     * Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
     */
    zone?: pulumi.Input<string>;
}
