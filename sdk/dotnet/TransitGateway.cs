// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/transitGateway:TransitGateway")]
    public partial class TransitGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Output("allocateNewEip")]
        public Output<bool?> AllocateNewEip { get; private set; } = null!;

        /// <summary>
        /// Approved learned CIDRs. Available as of provider version R2.21+.
        /// </summary>
        [Output("approvedLearnedCidrs")]
        public Output<ImmutableArray<string>> ApprovedLearnedCidrs { get; private set; } = null!;

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
        /// </summary>
        [Output("azureEipNameResourceGroup")]
        public Output<string> AzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
        /// </summary>
        [Output("bgpEcmp")]
        public Output<bool?> BgpEcmp { get; private set; } = null!;

        /// <summary>
        /// BGP Hold Time.
        /// </summary>
        [Output("bgpHoldTime")]
        public Output<int?> BgpHoldTime { get; private set; } = null!;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP Transit.
        /// </summary>
        [Output("bgpLanInterfaces")]
        public Output<ImmutableArray<Outputs.TransitGatewayBgpLanInterface>> BgpLanInterfaces { get; private set; } = null!;

        /// <summary>
        /// List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as
        /// of provider version R2.21.0+.
        /// </summary>
        [Output("bgpLanIpLists")]
        public Output<ImmutableArray<string>> BgpLanIpLists { get; private set; } = null!;

        /// <summary>
        /// Intended CIDR list to be advertised to external bgp router.
        /// </summary>
        [Output("bgpManualSpokeAdvertiseCidrs")]
        public Output<string?> BgpManualSpokeAdvertiseCidrs { get; private set; } = null!;

        /// <summary>
        /// BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Output("bgpPollingTime")]
        public Output<string?> BgpPollingTime { get; private set; } = null!;

        /// <summary>
        /// Instance ID of the transit gateway.
        /// </summary>
        [Output("cloudInstanceId")]
        public Output<string> CloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Output("cloudType")]
        public Output<int> CloudType { get; private set; } = null!;

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Output("connectedTransit")]
        public Output<bool?> ConnectedTransit { get; private set; } = null!;

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Output("customerManagedKeys")]
        public Output<string?> CustomerManagedKeys { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
        /// transit gateway.
        /// </summary>
        [Output("customizedSpokeVpcRoutes")]
        public Output<string?> CustomizedSpokeVpcRoutes { get; private set; } = null!;

        /// <summary>
        /// A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
        /// routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
        /// management access for a transit firenet gateway must be enabled.
        /// </summary>
        [Output("customizedTransitVpcRoutes")]
        public Output<ImmutableArray<string>> CustomizedTransitVpcRoutes { get; private set; } = null!;

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Output("eip")]
        public Output<string> Eip { get; private set; } = null!;

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled.
        /// </summary>
        [Output("enableActiveStandby")]
        public Output<bool?> EnableActiveStandby { get; private set; } = null!;

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Output("enableActiveStandbyPreemptive")]
        public Output<bool?> EnableActiveStandbyPreemptive { get; private set; } = null!;

        /// <summary>
        /// Switch to Enable/Disable advertise transit VPC network CIDR.
        /// </summary>
        [Output("enableAdvertiseTransitCidr")]
        public Output<bool?> EnableAdvertiseTransitCidr { get; private set; } = null!;

        /// <summary>
        /// Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
        /// (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
        /// </summary>
        [Output("enableBgpOverLan")]
        public Output<bool?> EnableBgpOverLan { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable egress transit firenet interfaces or not.
        /// </summary>
        [Output("enableEgressTransitFirenet")]
        public Output<bool?> EnableEgressTransitFirenet { get; private set; } = null!;

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
        /// value: false.
        /// </summary>
        [Output("enableEncryptVolume")]
        public Output<bool?> EnableEncryptVolume { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Output("enableFirenet")]
        public Output<bool?> EnableFirenet { get; private set; } = null!;

        /// <summary>
        /// Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
        /// are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
        /// us-west-2 and us-east-1. Valid values: true or false. Default value: false.
        /// </summary>
        [Output("enableGatewayLoadBalancer")]
        public Output<bool?> EnableGatewayLoadBalancer { get; private set; } = null!;

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Output("enableHybridConnection")]
        public Output<bool?> EnableHybridConnection { get; private set; } = null!;

        /// <summary>
        /// Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Output("enableJumboFrame")]
        public Output<bool?> EnableJumboFrame { get; private set; } = null!;

        /// <summary>
        /// Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableLearnedCidrsApproval")]
        public Output<bool?> EnableLearnedCidrsApproval { get; private set; } = null!;

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Output("enableMonitorGatewaySubnets")]
        public Output<bool?> EnableMonitorGatewaySubnets { get; private set; } = null!;

        /// <summary>
        /// Enable Multi-tier Transit mode on transit gateway.
        /// </summary>
        [Output("enableMultiTierTransit")]
        public Output<bool?> EnableMultiTierTransit { get; private set; } = null!;

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Output("enablePrivateOob")]
        public Output<bool?> EnablePrivateOob { get; private set; } = null!;

        /// <summary>
        /// Enable S2C receive packet CPU re-balancing on transit gateway.
        /// </summary>
        [Output("enableS2cRxBalancing")]
        public Output<bool?> EnableS2cRxBalancing { get; private set; } = null!;

        /// <summary>
        /// Enable segmentation to allow association of transit gateway to security domains.
        /// </summary>
        [Output("enableSegmentation")]
        public Output<bool?> EnableSegmentation { get; private set; } = null!;

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("enableSpotInstance")]
        public Output<bool?> EnableSpotInstance { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable transit firenet interfaces or not.
        /// </summary>
        [Output("enableTransitFirenet")]
        public Output<bool?> EnableTransitFirenet { get; private set; } = null!;

        /// <summary>
        /// Enable summarize CIDR to TGW.
        /// </summary>
        [Output("enableTransitSummarizeCidrToTgw")]
        public Output<bool?> EnableTransitSummarizeCidrToTgw { get; private set; } = null!;

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableVpcDnsServer")]
        public Output<bool?> EnableVpcDnsServer { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
        /// the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
        /// </summary>
        [Output("excludedAdvertisedSpokeRoutes")]
        public Output<string?> ExcludedAdvertisedSpokeRoutes { get; private set; } = null!;

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Output("faultDomain")]
        public Output<string> FaultDomain { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
        /// spoke gateways attached to this transit gateway.
        /// </summary>
        [Output("filteredSpokeVpcRoutes")]
        public Output<string?> FilteredSpokeVpcRoutes { get; private set; } = null!;

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Output("gwSize")]
        public Output<string> GwSize { get; private set; } = null!;

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Output("haAvailabilityDomain")]
        public Output<string> HaAvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
        /// </summary>
        [Output("haAzureEipNameResourceGroup")]
        public Output<string> HaAzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP HA Transit.
        /// </summary>
        [Output("haBgpLanInterfaces")]
        public Output<ImmutableArray<Outputs.TransitGatewayHaBgpLanInterface>> HaBgpLanInterfaces { get; private set; } = null!;

        /// <summary>
        /// List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available
        /// as of provider version R2.21.0+.
        /// </summary>
        [Output("haBgpLanIpLists")]
        public Output<ImmutableArray<string>> HaBgpLanIpLists { get; private set; } = null!;

        /// <summary>
        /// Cloud instance ID of HA transit gateway.
        /// </summary>
        [Output("haCloudInstanceId")]
        public Output<string> HaCloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Public IP address that you want assigned to the HA Transit Gateway.
        /// </summary>
        [Output("haEip")]
        public Output<string> HaEip { get; private set; } = null!;

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Output("haFaultDomain")]
        public Output<string> HaFaultDomain { get; private set; } = null!;

        /// <summary>
        /// Aviatrix transit gateway unique name of HA transit gateway.
        /// </summary>
        [Output("haGwName")]
        public Output<string> HaGwName { get; private set; } = null!;

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Output("haGwSize")]
        public Output<string?> HaGwSize { get; private set; } = null!;

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Output("haImageVersion")]
        public Output<string> HaImageVersion { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
        /// is set.
        /// </summary>
        [Output("haInsaneModeAz")]
        public Output<string?> HaInsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// Transit gateway lan interface cidr for the HA gateway.
        /// </summary>
        [Output("haLanInterfaceCidr")]
        public Output<string> HaLanInterfaceCidr { get; private set; } = null!;

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Output("haOobAvailabilityZone")]
        public Output<string?> HaOobAvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Output("haOobManagementSubnet")]
        public Output<string?> HaOobManagementSubnet { get; private set; } = null!;

        /// <summary>
        /// Private IP address of HA transit gateway.
        /// </summary>
        [Output("haPrivateIp")]
        public Output<string> HaPrivateIp { get; private set; } = null!;

        /// <summary>
        /// HA security group used for the transit gateway.
        /// </summary>
        [Output("haSecurityGroupId")]
        public Output<string> HaSecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Output("haSoftwareVersion")]
        public Output<string> HaSoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
        /// gateway.
        /// </summary>
        [Output("haSubnet")]
        public Output<string?> HaSubnet { get; private set; } = null!;

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Output("haZone")]
        public Output<string?> HaZone { get; private set; } = null!;

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Output("imageVersion")]
        public Output<string> ImageVersion { get; private set; } = null!;

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
        /// is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Output("insaneMode")]
        public Output<bool?> InsaneMode { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
        /// </summary>
        [Output("insaneModeAz")]
        public Output<string?> InsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// Transit gateway lan interface cidr.
        /// </summary>
        [Output("lanInterfaceCidr")]
        public Output<string> LanInterfaceCidr { get; private set; } = null!;

        /// <summary>
        /// LAN Private Subnet. Only used for GCP Transit FireNet.
        /// </summary>
        [Output("lanPrivateSubnet")]
        public Output<string?> LanPrivateSubnet { get; private set; } = null!;

        /// <summary>
        /// LAN VPC ID. Only used for GCP Transit FireNet.
        /// </summary>
        [Output("lanVpcId")]
        public Output<string?> LanVpcId { get; private set; } = null!;

        /// <summary>
        /// Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
        /// 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
        /// on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
        /// connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
        /// </summary>
        [Output("learnedCidrsApprovalMode")]
        public Output<string?> LearnedCidrsApprovalMode { get; private set; } = null!;

        /// <summary>
        /// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        /// </summary>
        [Output("localAsNumber")]
        public Output<string> LocalAsNumber { get; private set; } = null!;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        [Output("monitorExcludeLists")]
        public Output<ImmutableArray<string>> MonitorExcludeLists { get; private set; } = null!;

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Output("oobAvailabilityZone")]
        public Output<string?> OobAvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Output("oobManagementSubnet")]
        public Output<string?> OobManagementSubnet { get; private set; } = null!;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        /// </summary>
        [Output("prependAsPaths")]
        public Output<ImmutableArray<string>> PrependAsPaths { get; private set; } = null!;

        /// <summary>
        /// Private IP address of the transit gateway created.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Output("rxQueueSize")]
        public Output<string?> RxQueueSize { get; private set; } = null!;

        /// <summary>
        /// Security group used for the transit gateway.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Output("singleAzHa")]
        public Output<bool?> SingleAzHa { get; private set; } = null!;

        /// <summary>
        /// Enable or disable Source NAT feature in 'single_ip' mode for this container.
        /// </summary>
        [Output("singleIpSnat")]
        public Output<bool?> SingleIpSnat { get; private set; } = null!;

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Output("softwareVersion")]
        public Output<string> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Output("tagLists")]
        public Output<ImmutableArray<string>> TagLists { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the transit gateway.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The IPSec tunnel down detection time for the transit gateway.
        /// </summary>
        [Output("tunnelDetectionTime")]
        public Output<int> TunnelDetectionTime { get; private set; } = null!;

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Output("vpcReg")]
        public Output<string> VpcReg { get; private set; } = null!;

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a TransitGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransitGateway(string name, TransitGatewayArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/transitGateway:TransitGateway", name, args ?? new TransitGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransitGateway(string name, Input<string> id, TransitGatewayState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/transitGateway:TransitGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransitGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransitGateway Get(string name, Input<string> id, TransitGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new TransitGateway(name, id, state, options);
        }
    }

    public sealed class TransitGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs. Available as of provider version R2.21+.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
        /// </summary>
        [Input("bgpEcmp")]
        public Input<bool>? BgpEcmp { get; set; }

        /// <summary>
        /// BGP Hold Time.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        [Input("bgpLanInterfaces")]
        private InputList<Inputs.TransitGatewayBgpLanInterfaceArgs>? _bgpLanInterfaces;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP Transit.
        /// </summary>
        public InputList<Inputs.TransitGatewayBgpLanInterfaceArgs> BgpLanInterfaces
        {
            get => _bgpLanInterfaces ?? (_bgpLanInterfaces = new InputList<Inputs.TransitGatewayBgpLanInterfaceArgs>());
            set => _bgpLanInterfaces = value;
        }

        /// <summary>
        /// Intended CIDR list to be advertised to external bgp router.
        /// </summary>
        [Input("bgpManualSpokeAdvertiseCidrs")]
        public Input<string>? BgpManualSpokeAdvertiseCidrs { get; set; }

        /// <summary>
        /// BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<string>? BgpPollingTime { get; set; }

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("cloudType", required: true)]
        public Input<int> CloudType { get; set; } = null!;

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Input("connectedTransit")]
        public Input<bool>? ConnectedTransit { get; set; }

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
        /// transit gateway.
        /// </summary>
        [Input("customizedSpokeVpcRoutes")]
        public Input<string>? CustomizedSpokeVpcRoutes { get; set; }

        [Input("customizedTransitVpcRoutes")]
        private InputList<string>? _customizedTransitVpcRoutes;

        /// <summary>
        /// A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
        /// routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
        /// management access for a transit firenet gateway must be enabled.
        /// </summary>
        public InputList<string> CustomizedTransitVpcRoutes
        {
            get => _customizedTransitVpcRoutes ?? (_customizedTransitVpcRoutes = new InputList<string>());
            set => _customizedTransitVpcRoutes = value;
        }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled.
        /// </summary>
        [Input("enableActiveStandby")]
        public Input<bool>? EnableActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableActiveStandbyPreemptive")]
        public Input<bool>? EnableActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Switch to Enable/Disable advertise transit VPC network CIDR.
        /// </summary>
        [Input("enableAdvertiseTransitCidr")]
        public Input<bool>? EnableAdvertiseTransitCidr { get; set; }

        /// <summary>
        /// Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
        /// (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
        /// </summary>
        [Input("enableBgpOverLan")]
        public Input<bool>? EnableBgpOverLan { get; set; }

        /// <summary>
        /// Specify whether to enable egress transit firenet interfaces or not.
        /// </summary>
        [Input("enableEgressTransitFirenet")]
        public Input<bool>? EnableEgressTransitFirenet { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
        /// value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Input("enableFirenet")]
        public Input<bool>? EnableFirenet { get; set; }

        /// <summary>
        /// Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
        /// are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
        /// us-west-2 and us-east-1. Valid values: true or false. Default value: false.
        /// </summary>
        [Input("enableGatewayLoadBalancer")]
        public Input<bool>? EnableGatewayLoadBalancer { get; set; }

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Input("enableHybridConnection")]
        public Input<bool>? EnableHybridConnection { get; set; }

        /// <summary>
        /// Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Enable Multi-tier Transit mode on transit gateway.
        /// </summary>
        [Input("enableMultiTierTransit")]
        public Input<bool>? EnableMultiTierTransit { get; set; }

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Input("enablePrivateOob")]
        public Input<bool>? EnablePrivateOob { get; set; }

        /// <summary>
        /// Enable S2C receive packet CPU re-balancing on transit gateway.
        /// </summary>
        [Input("enableS2cRxBalancing")]
        public Input<bool>? EnableS2cRxBalancing { get; set; }

        /// <summary>
        /// Enable segmentation to allow association of transit gateway to security domains.
        /// </summary>
        [Input("enableSegmentation")]
        public Input<bool>? EnableSegmentation { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Specify whether to enable transit firenet interfaces or not.
        /// </summary>
        [Input("enableTransitFirenet")]
        public Input<bool>? EnableTransitFirenet { get; set; }

        /// <summary>
        /// Enable summarize CIDR to TGW.
        /// </summary>
        [Input("enableTransitSummarizeCidrToTgw")]
        public Input<bool>? EnableTransitSummarizeCidrToTgw { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
        /// the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
        /// </summary>
        [Input("excludedAdvertisedSpokeRoutes")]
        public Input<string>? ExcludedAdvertisedSpokeRoutes { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
        /// spoke gateways attached to this transit gateway.
        /// </summary>
        [Input("filteredSpokeVpcRoutes")]
        public Input<string>? FilteredSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("gwSize", required: true)]
        public Input<string> GwSize { get; set; } = null!;

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Input("haAvailabilityDomain")]
        public Input<string>? HaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
        /// </summary>
        [Input("haAzureEipNameResourceGroup")]
        public Input<string>? HaAzureEipNameResourceGroup { get; set; }

        [Input("haBgpLanInterfaces")]
        private InputList<Inputs.TransitGatewayHaBgpLanInterfaceArgs>? _haBgpLanInterfaces;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP HA Transit.
        /// </summary>
        public InputList<Inputs.TransitGatewayHaBgpLanInterfaceArgs> HaBgpLanInterfaces
        {
            get => _haBgpLanInterfaces ?? (_haBgpLanInterfaces = new InputList<Inputs.TransitGatewayHaBgpLanInterfaceArgs>());
            set => _haBgpLanInterfaces = value;
        }

        /// <summary>
        /// Public IP address that you want assigned to the HA Transit Gateway.
        /// </summary>
        [Input("haEip")]
        public Input<string>? HaEip { get; set; }

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Input("haFaultDomain")]
        public Input<string>? HaFaultDomain { get; set; }

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Input("haImageVersion")]
        public Input<string>? HaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
        /// is set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Input("haOobAvailabilityZone")]
        public Input<string>? HaOobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Input("haOobManagementSubnet")]
        public Input<string>? HaOobManagementSubnet { get; set; }

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Input("haSoftwareVersion")]
        public Input<string>? HaSoftwareVersion { get; set; }

        /// <summary>
        /// HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
        /// gateway.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Input("haZone")]
        public Input<string>? HaZone { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
        /// is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// LAN Private Subnet. Only used for GCP Transit FireNet.
        /// </summary>
        [Input("lanPrivateSubnet")]
        public Input<string>? LanPrivateSubnet { get; set; }

        /// <summary>
        /// LAN VPC ID. Only used for GCP Transit FireNet.
        /// </summary>
        [Input("lanVpcId")]
        public Input<string>? LanVpcId { get; set; }

        /// <summary>
        /// Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
        /// 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
        /// on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
        /// connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
        /// </summary>
        [Input("learnedCidrsApprovalMode")]
        public Input<string>? LearnedCidrsApprovalMode { get; set; }

        /// <summary>
        /// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Input("oobAvailabilityZone")]
        public Input<string>? OobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Input("oobManagementSubnet")]
        public Input<string>? OobManagementSubnet { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Enable or disable Source NAT feature in 'single_ip' mode for this container.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the transit gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The IPSec tunnel down detection time for the transit gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg", required: true)]
        public Input<string> VpcReg { get; set; } = null!;

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public TransitGatewayArgs()
        {
        }
    }

    public sealed class TransitGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs. Available as of provider version R2.21+.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Transit Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop.
        /// </summary>
        [Input("bgpEcmp")]
        public Input<bool>? BgpEcmp { get; set; }

        /// <summary>
        /// BGP Hold Time.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        [Input("bgpLanInterfaces")]
        private InputList<Inputs.TransitGatewayBgpLanInterfaceGetArgs>? _bgpLanInterfaces;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP Transit.
        /// </summary>
        public InputList<Inputs.TransitGatewayBgpLanInterfaceGetArgs> BgpLanInterfaces
        {
            get => _bgpLanInterfaces ?? (_bgpLanInterfaces = new InputList<Inputs.TransitGatewayBgpLanInterfaceGetArgs>());
            set => _bgpLanInterfaces = value;
        }

        [Input("bgpLanIpLists")]
        private InputList<string>? _bgpLanIpLists;

        /// <summary>
        /// List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP. Available as
        /// of provider version R2.21.0+.
        /// </summary>
        public InputList<string> BgpLanIpLists
        {
            get => _bgpLanIpLists ?? (_bgpLanIpLists = new InputList<string>());
            set => _bgpLanIpLists = value;
        }

        /// <summary>
        /// Intended CIDR list to be advertised to external bgp router.
        /// </summary>
        [Input("bgpManualSpokeAdvertiseCidrs")]
        public Input<string>? BgpManualSpokeAdvertiseCidrs { get; set; }

        /// <summary>
        /// BGP route polling time. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<string>? BgpPollingTime { get; set; }

        /// <summary>
        /// Instance ID of the transit gateway.
        /// </summary>
        [Input("cloudInstanceId")]
        public Input<string>? CloudInstanceId { get; set; }

        /// <summary>
        /// Type of cloud service provider, requires an integer value. Use 1 for AWS.
        /// </summary>
        [Input("cloudType")]
        public Input<int>? CloudType { get; set; }

        /// <summary>
        /// Specify Connected Transit status.
        /// </summary>
        [Input("connectedTransit")]
        public Input<bool>? ConnectedTransit { get; set; }

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this
        /// transit gateway.
        /// </summary>
        [Input("customizedSpokeVpcRoutes")]
        public Input<string>? CustomizedSpokeVpcRoutes { get; set; }

        [Input("customizedTransitVpcRoutes")]
        private InputList<string>? _customizedTransitVpcRoutes;

        /// <summary>
        /// A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC
        /// routing tables, including RFC1918 and non-RFC1918 CIDRs.To be effective, `enable_advertise_transit_cidr` or firewall
        /// management access for a transit firenet gateway must be enabled.
        /// </summary>
        public InputList<string> CustomizedTransitVpcRoutes
        {
            get => _customizedTransitVpcRoutes ?? (_customizedTransitVpcRoutes = new InputList<string>());
            set => _customizedTransitVpcRoutes = value;
        }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled.
        /// </summary>
        [Input("enableActiveStandby")]
        public Input<bool>? EnableActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableActiveStandbyPreemptive")]
        public Input<bool>? EnableActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Switch to Enable/Disable advertise transit VPC network CIDR.
        /// </summary>
        [Input("enableAdvertiseTransitCidr")]
        public Input<bool>? EnableAdvertiseTransitCidr { get; set; }

        /// <summary>
        /// Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Only valid for cloud_type = 4 (GCP) and 8
        /// (Azure). Valid values: true or false. Default value: false. Available as of provider version R2.18+
        /// </summary>
        [Input("enableBgpOverLan")]
        public Input<bool>? EnableBgpOverLan { get; set; }

        /// <summary>
        /// Specify whether to enable egress transit firenet interfaces or not.
        /// </summary>
        [Input("enableEgressTransitFirenet")]
        public Input<bool>? EnableEgressTransitFirenet { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS and AWSGov providers. Valid values: true, false. Default
        /// value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Specify whether to enable firenet interfaces or not.
        /// </summary>
        [Input("enableFirenet")]
        public Input<bool>? EnableFirenet { get; set; }

        /// <summary>
        /// Enable firenet interfaces with AWS Gateway Load Balancer. Only valid when `enable_firenet` or `enable_transit_firenet`
        /// are set to true and `cloud_type` = 1 (AWS). Currently AWS Gateway Load Balancer is only supported in AWS regions
        /// us-west-2 and us-east-1. Valid values: true or false. Default value: false.
        /// </summary>
        [Input("enableGatewayLoadBalancer")]
        public Input<bool>? EnableGatewayLoadBalancer { get; set; }

        /// <summary>
        /// Sign of readiness for TGW connection.
        /// </summary>
        [Input("enableHybridConnection")]
        public Input<bool>? EnableHybridConnection { get; set; }

        /// <summary>
        /// Enable jumbo frame support for transit gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable encrypted transit approval for transit Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Enable Multi-tier Transit mode on transit gateway.
        /// </summary>
        [Input("enableMultiTierTransit")]
        public Input<bool>? EnableMultiTierTransit { get; set; }

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Input("enablePrivateOob")]
        public Input<bool>? EnablePrivateOob { get; set; }

        /// <summary>
        /// Enable S2C receive packet CPU re-balancing on transit gateway.
        /// </summary>
        [Input("enableS2cRxBalancing")]
        public Input<bool>? EnableS2cRxBalancing { get; set; }

        /// <summary>
        /// Enable segmentation to allow association of transit gateway to security domains.
        /// </summary>
        [Input("enableSegmentation")]
        public Input<bool>? EnableSegmentation { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Specify whether to enable transit firenet interfaces or not.
        /// </summary>
        [Input("enableTransitFirenet")]
        public Input<bool>? EnableTransitFirenet { get; set; }

        /// <summary>
        /// Enable summarize CIDR to TGW.
        /// </summary>
        [Input("enableTransitSummarizeCidrToTgw")]
        public Input<bool>? EnableTransitSummarizeCidrToTgw { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Excluded CIDR List'. When configured, it inspects all
        /// the advertised CIDRs from its spoke gateways and remove those included in the 'Excluded CIDR List'.
        /// </summary>
        [Input("excludedAdvertisedSpokeRoutes")]
        public Input<string>? ExcludedAdvertisedSpokeRoutes { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all
        /// spoke gateways attached to this transit gateway.
        /// </summary>
        [Input("filteredSpokeVpcRoutes")]
        public Input<string>? FilteredSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("gwSize")]
        public Input<string>? GwSize { get; set; }

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Input("haAvailabilityDomain")]
        public Input<string>? HaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Transit Gateway.
        /// </summary>
        [Input("haAzureEipNameResourceGroup")]
        public Input<string>? HaAzureEipNameResourceGroup { get; set; }

        [Input("haBgpLanInterfaces")]
        private InputList<Inputs.TransitGatewayHaBgpLanInterfaceGetArgs>? _haBgpLanInterfaces;

        /// <summary>
        /// Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available
        /// for GCP HA Transit.
        /// </summary>
        public InputList<Inputs.TransitGatewayHaBgpLanInterfaceGetArgs> HaBgpLanInterfaces
        {
            get => _haBgpLanInterfaces ?? (_haBgpLanInterfaces = new InputList<Inputs.TransitGatewayHaBgpLanInterfaceGetArgs>());
            set => _haBgpLanInterfaces = value;
        }

        [Input("haBgpLanIpLists")]
        private InputList<string>? _haBgpLanIpLists;

        /// <summary>
        /// List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP. Available
        /// as of provider version R2.21.0+.
        /// </summary>
        public InputList<string> HaBgpLanIpLists
        {
            get => _haBgpLanIpLists ?? (_haBgpLanIpLists = new InputList<string>());
            set => _haBgpLanIpLists = value;
        }

        /// <summary>
        /// Cloud instance ID of HA transit gateway.
        /// </summary>
        [Input("haCloudInstanceId")]
        public Input<string>? HaCloudInstanceId { get; set; }

        /// <summary>
        /// Public IP address that you want assigned to the HA Transit Gateway.
        /// </summary>
        [Input("haEip")]
        public Input<string>? HaEip { get; set; }

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Input("haFaultDomain")]
        public Input<string>? HaFaultDomain { get; set; }

        /// <summary>
        /// Aviatrix transit gateway unique name of HA transit gateway.
        /// </summary>
        [Input("haGwName")]
        public Input<string>? HaGwName { get; set; }

        /// <summary>
        /// HA Gateway Size. Mandatory if HA is enabled (ha_subnet is set).
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Input("haImageVersion")]
        public Input<string>? HaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS if insane_mode is enabled and ha_subnet
        /// is set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// Transit gateway lan interface cidr for the HA gateway.
        /// </summary>
        [Input("haLanInterfaceCidr")]
        public Input<string>? HaLanInterfaceCidr { get; set; }

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Input("haOobAvailabilityZone")]
        public Input<string>? HaOobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Input("haOobManagementSubnet")]
        public Input<string>? HaOobManagementSubnet { get; set; }

        /// <summary>
        /// Private IP address of HA transit gateway.
        /// </summary>
        [Input("haPrivateIp")]
        public Input<string>? HaPrivateIp { get; set; }

        /// <summary>
        /// HA security group used for the transit gateway.
        /// </summary>
        [Input("haSecurityGroupId")]
        public Input<string>? HaSecurityGroupId { get; set; }

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Input("haSoftwareVersion")]
        public Input<string>? HaSoftwareVersion { get; set; }

        /// <summary>
        /// HA Subnet. Required for enabling HA for AWS/AWSGov/AWSChina/Azure/OCI/Alibaba Cloud. Optional for enabling HA for GCP
        /// gateway.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Input("haZone")]
        public Input<string>? HaZone { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// Enable Insane Mode for Transit. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane mode
        /// is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS if insane_mode is enabled.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// Transit gateway lan interface cidr.
        /// </summary>
        [Input("lanInterfaceCidr")]
        public Input<string>? LanInterfaceCidr { get; set; }

        /// <summary>
        /// LAN Private Subnet. Only used for GCP Transit FireNet.
        /// </summary>
        [Input("lanPrivateSubnet")]
        public Input<string>? LanPrivateSubnet { get; set; }

        /// <summary>
        /// LAN VPC ID. Only used for GCP Transit FireNet.
        /// </summary>
        [Input("lanVpcId")]
        public Input<string>? LanVpcId { get; set; }

        /// <summary>
        /// Set the learned CIDRs approval mode. Only valid when 'enable_learned_cidrs_approval' is set to true. If set to
        /// 'gateway', learned CIDR approval applies to ALL connections. If set to 'connection', learned CIDR approval is configured
        /// on a per connection basis. When configuring per connection, use the enable_learned_cidrs_approval attribute within the
        /// connection resource to toggle learned CIDR approval. Valid values: 'gateway' or 'connection'. Default value: 'gateway'.
        /// </summary>
        [Input("learnedCidrsApprovalMode")]
        public Input<string>? LearnedCidrsApprovalMode { get; set; }

        /// <summary>
        /// Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Input("oobAvailabilityZone")]
        public Input<string>? OobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Input("oobManagementSubnet")]
        public Input<string>? OobManagementSubnet { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Private IP address of the transit gateway created.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Security group used for the transit gateway.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Enable or disable Source NAT feature in 'single_ip' mode for this container.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// Public Subnet Name.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the transit gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The IPSec tunnel down detection time for the transit gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg")]
        public Input<string>? VpcReg { get; set; }

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public TransitGatewayState()
        {
        }
    }
}
