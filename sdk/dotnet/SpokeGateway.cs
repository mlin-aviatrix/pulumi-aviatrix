// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/spokeGateway:SpokeGateway")]
    public partial class SpokeGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Output("allocateNewEip")]
        public Output<bool?> AllocateNewEip { get; private set; } = null!;

        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
        /// </summary>
        [Output("approvedLearnedCidrs")]
        public Output<ImmutableArray<string>> ApprovedLearnedCidrs { get; private set; } = null!;

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
        /// </summary>
        [Output("azureEipNameResourceGroup")]
        public Output<string> AzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
        /// </summary>
        [Output("bgpEcmp")]
        public Output<bool?> BgpEcmp { get; private set; } = null!;

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Output("bgpHoldTime")]
        public Output<int?> BgpHoldTime { get; private set; } = null!;

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Output("bgpPollingTime")]
        public Output<int?> BgpPollingTime { get; private set; } = null!;

        /// <summary>
        /// Cloud instance ID.
        /// </summary>
        [Output("cloudInstanceId")]
        public Output<string> CloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Output("cloudType")]
        public Output<int> CloudType { get; private set; } = null!;

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Output("customerManagedKeys")]
        public Output<string?> CustomerManagedKeys { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
        /// </summary>
        [Output("customizedSpokeVpcRoutes")]
        public Output<string?> CustomizedSpokeVpcRoutes { get; private set; } = null!;

        /// <summary>
        /// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
        /// </summary>
        [Output("disableRoutePropagation")]
        public Output<bool?> DisableRoutePropagation { get; private set; } = null!;

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Output("eip")]
        public Output<string> Eip { get; private set; } = null!;

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
        /// </summary>
        [Output("enableActiveStandby")]
        public Output<bool?> EnableActiveStandby { get; private set; } = null!;

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Output("enableActiveStandbyPreemptive")]
        public Output<bool?> EnableActiveStandbyPreemptive { get; private set; } = null!;

        /// <summary>
        /// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
        /// </summary>
        [Output("enableAutoAdvertiseS2cCidrs")]
        public Output<bool?> EnableAutoAdvertiseS2cCidrs { get; private set; } = null!;

        /// <summary>
        /// Enable BGP. Default: false.
        /// </summary>
        [Output("enableBgp")]
        public Output<bool?> EnableBgp { get; private set; } = null!;

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Output("enableEncryptVolume")]
        public Output<bool?> EnableEncryptVolume { get; private set; } = null!;

        /// <summary>
        /// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Output("enableJumboFrame")]
        public Output<bool?> EnableJumboFrame { get; private set; } = null!;

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableLearnedCidrsApproval")]
        public Output<bool?> EnableLearnedCidrsApproval { get; private set; } = null!;

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Output("enableMonitorGatewaySubnets")]
        public Output<bool?> EnableMonitorGatewaySubnets { get; private set; } = null!;

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Output("enablePrivateOob")]
        public Output<bool?> EnablePrivateOob { get; private set; } = null!;

        /// <summary>
        /// Config Private VPC Default Route.
        /// </summary>
        [Output("enablePrivateVpcDefaultRoute")]
        public Output<bool?> EnablePrivateVpcDefaultRoute { get; private set; } = null!;

        /// <summary>
        /// Skip Public Route Table Update.
        /// </summary>
        [Output("enableSkipPublicRouteTableUpdate")]
        public Output<bool?> EnableSkipPublicRouteTableUpdate { get; private set; } = null!;

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("enableSpotInstance")]
        public Output<bool?> EnableSpotInstance { get; private set; } = null!;

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableVpcDnsServer")]
        public Output<bool?> EnableVpcDnsServer { get; private set; } = null!;

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Output("faultDomain")]
        public Output<string> FaultDomain { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
        /// this spoke gateway only.
        /// </summary>
        [Output("filteredSpokeVpcRoutes")]
        public Output<string?> FilteredSpokeVpcRoutes { get; private set; } = null!;

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Output("gwSize")]
        public Output<string> GwSize { get; private set; } = null!;

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Output("haAvailabilityDomain")]
        public Output<string> HaAvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
        /// </summary>
        [Output("haAzureEipNameResourceGroup")]
        public Output<string> HaAzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Cloud instance ID of HA spoke gateway.
        /// </summary>
        [Output("haCloudInstanceId")]
        public Output<string> HaCloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Public IP address that you want assigned to the HA Spoke Gateway.
        /// </summary>
        [Output("haEip")]
        public Output<string> HaEip { get; private set; } = null!;

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Output("haFaultDomain")]
        public Output<string> HaFaultDomain { get; private set; } = null!;

        /// <summary>
        /// Aviatrix spoke gateway unique name of HA spoke gateway.
        /// </summary>
        [Output("haGwName")]
        public Output<string> HaGwName { get; private set; } = null!;

        /// <summary>
        /// HA Gateway Size.
        /// </summary>
        [Output("haGwSize")]
        public Output<string?> HaGwSize { get; private set; } = null!;

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Output("haImageVersion")]
        public Output<string> HaImageVersion { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
        /// set.
        /// </summary>
        [Output("haInsaneModeAz")]
        public Output<string?> HaInsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Output("haOobAvailabilityZone")]
        public Output<string?> HaOobAvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Output("haOobManagementSubnet")]
        public Output<string?> HaOobManagementSubnet { get; private set; } = null!;

        /// <summary>
        /// Private IP address of the spoke gateway created.
        /// </summary>
        [Output("haPrivateIp")]
        public Output<string> HaPrivateIp { get; private set; } = null!;

        /// <summary>
        /// HA security group used for the spoke gateway.
        /// </summary>
        [Output("haSecurityGroupId")]
        public Output<string> HaSecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Output("haSoftwareVersion")]
        public Output<string> HaSoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
        /// for GCP.
        /// </summary>
        [Output("haSubnet")]
        public Output<string?> HaSubnet { get; private set; } = null!;

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Output("haZone")]
        public Output<string?> HaZone { get; private set; } = null!;

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Output("imageVersion")]
        public Output<string> ImageVersion { get; private set; } = null!;

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
        /// all advertised routes from this VPC.
        /// </summary>
        [Output("includedAdvertisedSpokeRoutes")]
        public Output<string?> IncludedAdvertisedSpokeRoutes { get; private set; } = null!;

        /// <summary>
        /// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
        /// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Output("insaneMode")]
        public Output<bool?> InsaneMode { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
        /// </summary>
        [Output("insaneModeAz")]
        public Output<string?> InsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
        /// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
        /// 'gateway'.
        /// </summary>
        [Output("learnedCidrsApprovalMode")]
        public Output<string?> LearnedCidrsApprovalMode { get; private set; } = null!;

        /// <summary>
        /// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
        /// </summary>
        [Output("localAsNumber")]
        public Output<string> LocalAsNumber { get; private set; } = null!;

        /// <summary>
        /// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
        /// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
        /// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
        /// </summary>
        [Output("manageTransitGatewayAttachment")]
        public Output<bool?> ManageTransitGatewayAttachment { get; private set; } = null!;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        [Output("monitorExcludeLists")]
        public Output<ImmutableArray<string>> MonitorExcludeLists { get; private set; } = null!;

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Output("oobAvailabilityZone")]
        public Output<string?> OobAvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Output("oobManagementSubnet")]
        public Output<string?> OobManagementSubnet { get; private set; } = null!;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
        /// Gateway
        /// </summary>
        [Output("prependAsPaths")]
        public Output<ImmutableArray<string>> PrependAsPaths { get; private set; } = null!;

        /// <summary>
        /// Private IP address of the spoke gateway created.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Output("rxQueueSize")]
        public Output<string?> RxQueueSize { get; private set; } = null!;

        /// <summary>
        /// Security group used for the spoke gateway.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Output("singleAzHa")]
        public Output<bool?> SingleAzHa { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
        /// </summary>
        [Output("singleIpSnat")]
        public Output<bool?> SingleIpSnat { get; private set; } = null!;

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Output("softwareVersion")]
        public Output<string> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        [Output("spokeBgpManualAdvertiseCidrs")]
        public Output<ImmutableArray<string>> SpokeBgpManualAdvertiseCidrs { get; private set; } = null!;

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// Public Subnet Info.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Output("tagLists")]
        public Output<ImmutableArray<string>> TagLists { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the spoke gateway.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
        /// example, 'transit-gw1,transit-gw2'.
        /// </summary>
        [Output("transitGw")]
        public Output<string?> TransitGw { get; private set; } = null!;

        /// <summary>
        /// The IPSec tunnel down detection time for the Spoke Gateway.
        /// </summary>
        [Output("tunnelDetectionTime")]
        public Output<int> TunnelDetectionTime { get; private set; } = null!;

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Output("vpcReg")]
        public Output<string> VpcReg { get; private set; } = null!;

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a SpokeGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpokeGateway(string name, SpokeGatewayArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/spokeGateway:SpokeGateway", name, args ?? new SpokeGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SpokeGateway(string name, Input<string> id, SpokeGatewayState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/spokeGateway:SpokeGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpokeGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpokeGateway Get(string name, Input<string> id, SpokeGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new SpokeGateway(name, id, state, options);
        }
    }

    public sealed class SpokeGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
        /// </summary>
        [Input("bgpEcmp")]
        public Input<bool>? BgpEcmp { get; set; }

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<int>? BgpPollingTime { get; set; }

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Input("cloudType", required: true)]
        public Input<int> CloudType { get; set; } = null!;

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
        /// </summary>
        [Input("customizedSpokeVpcRoutes")]
        public Input<string>? CustomizedSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
        /// </summary>
        [Input("disableRoutePropagation")]
        public Input<bool>? DisableRoutePropagation { get; set; }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
        /// </summary>
        [Input("enableActiveStandby")]
        public Input<bool>? EnableActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableActiveStandbyPreemptive")]
        public Input<bool>? EnableActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
        /// </summary>
        [Input("enableAutoAdvertiseS2cCidrs")]
        public Input<bool>? EnableAutoAdvertiseS2cCidrs { get; set; }

        /// <summary>
        /// Enable BGP. Default: false.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Input("enablePrivateOob")]
        public Input<bool>? EnablePrivateOob { get; set; }

        /// <summary>
        /// Config Private VPC Default Route.
        /// </summary>
        [Input("enablePrivateVpcDefaultRoute")]
        public Input<bool>? EnablePrivateVpcDefaultRoute { get; set; }

        /// <summary>
        /// Skip Public Route Table Update.
        /// </summary>
        [Input("enableSkipPublicRouteTableUpdate")]
        public Input<bool>? EnableSkipPublicRouteTableUpdate { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
        /// this spoke gateway only.
        /// </summary>
        [Input("filteredSpokeVpcRoutes")]
        public Input<string>? FilteredSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("gwSize", required: true)]
        public Input<string> GwSize { get; set; } = null!;

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Input("haAvailabilityDomain")]
        public Input<string>? HaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
        /// </summary>
        [Input("haAzureEipNameResourceGroup")]
        public Input<string>? HaAzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Public IP address that you want assigned to the HA Spoke Gateway.
        /// </summary>
        [Input("haEip")]
        public Input<string>? HaEip { get; set; }

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Input("haFaultDomain")]
        public Input<string>? HaFaultDomain { get; set; }

        /// <summary>
        /// HA Gateway Size.
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Input("haImageVersion")]
        public Input<string>? HaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
        /// set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Input("haOobAvailabilityZone")]
        public Input<string>? HaOobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Input("haOobManagementSubnet")]
        public Input<string>? HaOobManagementSubnet { get; set; }

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Input("haSoftwareVersion")]
        public Input<string>? HaSoftwareVersion { get; set; }

        /// <summary>
        /// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
        /// for GCP.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Input("haZone")]
        public Input<string>? HaZone { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
        /// all advertised routes from this VPC.
        /// </summary>
        [Input("includedAdvertisedSpokeRoutes")]
        public Input<string>? IncludedAdvertisedSpokeRoutes { get; set; }

        /// <summary>
        /// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
        /// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
        /// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
        /// 'gateway'.
        /// </summary>
        [Input("learnedCidrsApprovalMode")]
        public Input<string>? LearnedCidrsApprovalMode { get; set; }

        /// <summary>
        /// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        /// <summary>
        /// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
        /// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
        /// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
        /// </summary>
        [Input("manageTransitGatewayAttachment")]
        public Input<bool>? ManageTransitGatewayAttachment { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Input("oobAvailabilityZone")]
        public Input<string>? OobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Input("oobManagementSubnet")]
        public Input<string>? OobManagementSubnet { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
        /// Gateway
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        [Input("spokeBgpManualAdvertiseCidrs")]
        private InputList<string>? _spokeBgpManualAdvertiseCidrs;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        public InputList<string> SpokeBgpManualAdvertiseCidrs
        {
            get => _spokeBgpManualAdvertiseCidrs ?? (_spokeBgpManualAdvertiseCidrs = new InputList<string>());
            set => _spokeBgpManualAdvertiseCidrs = value;
        }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// Public Subnet Info.
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the spoke gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
        /// example, 'transit-gw1,transit-gw2'.
        /// </summary>
        [Input("transitGw")]
        public Input<string>? TransitGw { get; set; }

        /// <summary>
        /// The IPSec tunnel down detection time for the Spoke Gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg", required: true)]
        public Input<string> VpcReg { get; set; } = null!;

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SpokeGatewayArgs()
        {
        }
    }

    public sealed class SpokeGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter represents the name of a Cloud-Account in Aviatrix controller.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// If false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for
        /// this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        [Input("approvedLearnedCidrs")]
        private InputList<string>? _approvedLearnedCidrs;

        /// <summary>
        /// Approved learned CIDRs for BGP Spoke Gateway. Available as of provider version R2.21+.
        /// </summary>
        public InputList<string> ApprovedLearnedCidrs
        {
            get => _approvedLearnedCidrs ?? (_approvedLearnedCidrs = new InputList<string>());
            set => _approvedLearnedCidrs = value;
        }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Spoke Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Enable Equal Cost Multi Path (ECMP) routing for the next hop for BGP Spoke Gateway.
        /// </summary>
        [Input("bgpEcmp")]
        public Input<bool>? BgpEcmp { get; set; }

        /// <summary>
        /// BGP Hold Time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 12 and 360.
        /// </summary>
        [Input("bgpHoldTime")]
        public Input<int>? BgpHoldTime { get; set; }

        /// <summary>
        /// BGP route polling time for BGP Spoke Gateway. Unit is in seconds. Valid values are between 10 and 50.
        /// </summary>
        [Input("bgpPollingTime")]
        public Input<int>? BgpPollingTime { get; set; }

        /// <summary>
        /// Cloud instance ID.
        /// </summary>
        [Input("cloudInstanceId")]
        public Input<string>? CloudInstanceId { get; set; }

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Input("cloudType")]
        public Input<int>? CloudType { get; set; }

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned
        /// routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only.
        /// </summary>
        [Input("customizedSpokeVpcRoutes")]
        public Input<string>? CustomizedSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Disables route propagation on BGP Spoke to attached Transit Gateway. Default: false.
        /// </summary>
        [Input("disableRoutePropagation")]
        public Input<bool>? DisableRoutePropagation { get; set; }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// Enables Active-Standby Mode, available only with HA enabled for BGP Spoke Gateway.
        /// </summary>
        [Input("enableActiveStandby")]
        public Input<bool>? EnableActiveStandby { get; set; }

        /// <summary>
        /// Enables Preemptive Mode for Active-Standby, available only with Active-Standby enabled.
        /// </summary>
        [Input("enableActiveStandbyPreemptive")]
        public Input<bool>? EnableActiveStandbyPreemptive { get; set; }

        /// <summary>
        /// Automatically advertise remote CIDR to Aviatrix Transit Gateway when route based Site2Cloud Tunnel is created.
        /// </summary>
        [Input("enableAutoAdvertiseS2cCidrs")]
        public Input<bool>? EnableAutoAdvertiseS2cCidrs { get; set; }

        /// <summary>
        /// Enable BGP. Default: false.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Enable jumbo frame support for spoke gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableLearnedCidrsApproval")]
        public Input<bool>? EnableLearnedCidrsApproval { get; set; }

        /// <summary>
        /// Enable [monitor gateway subnets](https://docs.aviatrix.com/HowTos/gateway.html#monitor-gateway-subnet). Only valid for
        /// cloud_type = 1 (AWS) or 256 (AWSGov). Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Enable private OOB.
        /// </summary>
        [Input("enablePrivateOob")]
        public Input<bool>? EnablePrivateOob { get; set; }

        /// <summary>
        /// Config Private VPC Default Route.
        /// </summary>
        [Input("enablePrivateVpcDefaultRoute")]
        public Input<bool>? EnablePrivateVpcDefaultRoute { get; set; }

        /// <summary>
        /// Skip Public Route Table Update.
        /// </summary>
        [Input("enableSkipPublicRouteTableUpdate")]
        public Input<bool>? EnableSkipPublicRouteTableUpdate { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or
        /// it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to
        /// this spoke gateway only.
        /// </summary>
        [Input("filteredSpokeVpcRoutes")]
        public Input<string>? FilteredSpokeVpcRoutes { get; set; }

        /// <summary>
        /// Name of the gateway which is going to be created.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// Size of the gateway instance.
        /// </summary>
        [Input("gwSize")]
        public Input<string>? GwSize { get; set; }

        /// <summary>
        /// HA availability domain for OCI.
        /// </summary>
        [Input("haAvailabilityDomain")]
        public Input<string>? HaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the HA Spoke Gateway.
        /// </summary>
        [Input("haAzureEipNameResourceGroup")]
        public Input<string>? HaAzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Cloud instance ID of HA spoke gateway.
        /// </summary>
        [Input("haCloudInstanceId")]
        public Input<string>? HaCloudInstanceId { get; set; }

        /// <summary>
        /// Public IP address that you want assigned to the HA Spoke Gateway.
        /// </summary>
        [Input("haEip")]
        public Input<string>? HaEip { get; set; }

        /// <summary>
        /// HA fault domain for OCI.
        /// </summary>
        [Input("haFaultDomain")]
        public Input<string>? HaFaultDomain { get; set; }

        /// <summary>
        /// Aviatrix spoke gateway unique name of HA spoke gateway.
        /// </summary>
        [Input("haGwName")]
        public Input<string>? HaGwName { get; set; }

        /// <summary>
        /// HA Gateway Size.
        /// </summary>
        [Input("haGwSize")]
        public Input<string>? HaGwSize { get; set; }

        /// <summary>
        /// ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to update the
        /// gateway to the specified version.
        /// </summary>
        [Input("haImageVersion")]
        public Input<string>? HaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS if insane_mode is true and ha_subnet is
        /// set.
        /// </summary>
        [Input("haInsaneModeAz")]
        public Input<string>? HaInsaneModeAz { get; set; }

        /// <summary>
        /// OOB HA availability zone.
        /// </summary>
        [Input("haOobAvailabilityZone")]
        public Input<string>? HaOobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB HA management subnet.
        /// </summary>
        [Input("haOobManagementSubnet")]
        public Input<string>? HaOobManagementSubnet { get; set; }

        /// <summary>
        /// Private IP address of the spoke gateway created.
        /// </summary>
        [Input("haPrivateIp")]
        public Input<string>? HaPrivateIp { get; set; }

        /// <summary>
        /// HA security group used for the spoke gateway.
        /// </summary>
        [Input("haSecurityGroupId")]
        public Input<string>? HaSecurityGroupId { get; set; }

        /// <summary>
        /// ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt to update
        /// the gateway to the specified version. If left blank, the gateway software version will continue to be managed through
        /// the aviatrix_controller_config resource.
        /// </summary>
        [Input("haSoftwareVersion")]
        public Input<string>? HaSoftwareVersion { get; set; }

        /// <summary>
        /// HA Subnet. Required if enabling HA for AWS/AWSGov/AWSChina/Azure/AzureChina/OCI/Alibaba Cloud. Optional if enabling HA
        /// for GCP.
        /// </summary>
        [Input("haSubnet")]
        public Input<string>? HaSubnet { get; set; }

        /// <summary>
        /// HA Zone. Required if enabling HA for GCP. Optional for Azure.
        /// </summary>
        [Input("haZone")]
        public Input<string>? HaZone { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// A list of comma separated CIDRs to be advertised to on-prem as 'Included CIDR List'. When configured, it will replace
        /// all advertised routes from this VPC.
        /// </summary>
        [Input("includedAdvertisedSpokeRoutes")]
        public Input<string>? IncludedAdvertisedSpokeRoutes { get; set; }

        /// <summary>
        /// Enable Insane Mode for Spoke Gateway. Valid values: true, false. Supported for AWS/AWSGov, GCP, Azure and OCI. If insane
        /// mode is enabled, gateway size has to at least be c5 size for AWS and Standard_D3_v2 size for Azure.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Spoke Gateway. Required if insane_mode is enabled for AWS cloud.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// Set the learned CIDRs approval mode for BGP Spoke Gateway. Only valid when 'enable_learned_cidrs_approval' is set to
        /// true. Currently, only 'gateway' is supported: learned CIDR approval applies to ALL connections. Default value:
        /// 'gateway'.
        /// </summary>
        [Input("learnedCidrsApprovalMode")]
        public Input<string>? LearnedCidrsApprovalMode { get; set; }

        /// <summary>
        /// Changes the Aviatrix BGP Spoke Gateway ASN number before you setup Aviatrix BGP Spoke Gateway connection configurations.
        /// </summary>
        [Input("localAsNumber")]
        public Input<string>? LocalAsNumber { get; set; }

        /// <summary>
        /// This parameter is a switch used to determine whether or not to manage attaching this spoke gateway to transit gateways
        /// using the aviatrix_spoke_gateway resource. If this is set to false, attaching this spoke gateway to transit gateways
        /// must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true.
        /// </summary>
        [Input("manageTransitGatewayAttachment")]
        public Input<bool>? ManageTransitGatewayAttachment { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// OOB subnet availability zone.
        /// </summary>
        [Input("oobAvailabilityZone")]
        public Input<string>? OobAvailabilityZone { get; set; }

        /// <summary>
        /// OOB management subnet.
        /// </summary>
        [Input("oobManagementSubnet")]
        public Input<string>? OobManagementSubnet { get; set; }

        [Input("prependAsPaths")]
        private InputList<string>? _prependAsPaths;

        /// <summary>
        /// List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices. Only valid for BGP Spoke
        /// Gateway
        /// </summary>
        public InputList<string> PrependAsPaths
        {
            get => _prependAsPaths ?? (_prependAsPaths = new InputList<string>());
            set => _prependAsPaths = value;
        }

        /// <summary>
        /// Private IP address of the spoke gateway created.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// Security group used for the spoke gateway.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// Set to 'enabled' if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Specify whether to enable Source NAT feature in 'single_ip' mode on the gateway or not.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        [Input("spokeBgpManualAdvertiseCidrs")]
        private InputList<string>? _spokeBgpManualAdvertiseCidrs;

        /// <summary>
        /// Intended CIDR list to be advertised to external BGP router.
        /// </summary>
        public InputList<string> SpokeBgpManualAdvertiseCidrs
        {
            get => _spokeBgpManualAdvertiseCidrs ?? (_spokeBgpManualAdvertiseCidrs = new InputList<string>());
            set => _spokeBgpManualAdvertiseCidrs = value;
        }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// Public Subnet Info.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the spoke gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specify the transit Gateways to attach to this spoke. Format is a comma-separated list of transit gateway names. For
        /// example, 'transit-gw1,transit-gw2'.
        /// </summary>
        [Input("transitGw")]
        public Input<string>? TransitGw { get; set; }

        /// <summary>
        /// The IPSec tunnel down detection time for the Spoke Gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// VPC-ID/VNet-Name of cloud provider.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Region of cloud provider.
        /// </summary>
        [Input("vpcReg")]
        public Input<string>? VpcReg { get; set; }

        /// <summary>
        /// Availability Zone. Only available for cloud_type = 8 (Azure). Must be in the form 'az-n', for example, 'az-2'.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SpokeGatewayState()
        {
        }
    }
}
