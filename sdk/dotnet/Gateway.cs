// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aviatrix
{
    [AviatrixResourceType("aviatrix:index/gateway:Gateway")]
    public partial class Gateway : Pulumi.CustomResource
    {
        /// <summary>
        /// Account name. This account will be used to launch Aviatrix gateway.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
        /// </summary>
        [Output("additionalCidrs")]
        public Output<string?> AdditionalCidrs { get; private set; } = null!;

        /// <summary>
        /// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
        /// </summary>
        [Output("additionalCidrsDesignatedGateway")]
        public Output<string?> AdditionalCidrsDesignatedGateway { get; private set; } = null!;

        /// <summary>
        /// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
        /// use it for this gateway.
        /// </summary>
        [Output("allocateNewEip")]
        public Output<bool?> AllocateNewEip { get; private set; } = null!;

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Gateway.
        /// </summary>
        [Output("azureEipNameResourceGroup")]
        public Output<string> AzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Instance ID of the gateway.
        /// </summary>
        [Output("cloudInstanceId")]
        public Output<string> CloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Output("cloudType")]
        public Output<int> CloudType { get; private set; } = null!;

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Output("customerManagedKeys")]
        public Output<string?> CustomerManagedKeys { get; private set; } = null!;

        /// <summary>
        /// API hostname for DUO auth mode.
        /// </summary>
        [Output("duoApiHostname")]
        public Output<string?> DuoApiHostname { get; private set; } = null!;

        /// <summary>
        /// Integration key for DUO auth mode.
        /// </summary>
        [Output("duoIntegrationKey")]
        public Output<string?> DuoIntegrationKey { get; private set; } = null!;

        /// <summary>
        /// Push mode for DUO auth.
        /// </summary>
        [Output("duoPushMode")]
        public Output<string?> DuoPushMode { get; private set; } = null!;

        /// <summary>
        /// Secret key for DUO auth mode.
        /// </summary>
        [Output("duoSecretKey")]
        public Output<string?> DuoSecretKey { get; private set; } = null!;

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Output("eip")]
        public Output<string> Eip { get; private set; } = null!;

        /// <summary>
        /// ELB DNS Name.
        /// </summary>
        [Output("elbDnsName")]
        public Output<string> ElbDnsName { get; private set; } = null!;

        /// <summary>
        /// A name for the ELB that is created.
        /// </summary>
        [Output("elbName")]
        public Output<string> ElbName { get; private set; } = null!;

        /// <summary>
        /// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableDesignatedGateway")]
        public Output<bool?> EnableDesignatedGateway { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable ELB or not.
        /// </summary>
        [Output("enableElb")]
        public Output<bool?> EnableElb { get; private set; } = null!;

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Output("enableEncryptVolume")]
        public Output<bool?> EnableEncryptVolume { get; private set; } = null!;

        /// <summary>
        /// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Output("enableJumboFrame")]
        public Output<bool?> EnableJumboFrame { get; private set; } = null!;

        /// <summary>
        /// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
        /// </summary>
        [Output("enableLdap")]
        public Output<bool?> EnableLdap { get; private set; } = null!;

        /// <summary>
        /// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
        /// </summary>
        [Output("enableMonitorGatewaySubnets")]
        public Output<bool?> EnableMonitorGatewaySubnets { get; private set; } = null!;

        /// <summary>
        /// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
        /// </summary>
        [Output("enablePublicSubnetFiltering")]
        public Output<bool?> EnablePublicSubnetFiltering { get; private set; } = null!;

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("enableSpotInstance")]
        public Output<bool?> EnableSpotInstance { get; private set; } = null!;

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Output("enableVpcDnsServer")]
        public Output<bool?> EnableVpcDnsServer { get; private set; } = null!;

        /// <summary>
        /// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
        /// Default value: true.
        /// </summary>
        [Output("enableVpnNat")]
        public Output<bool?> EnableVpnNat { get; private set; } = null!;

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Output("faultDomain")]
        public Output<string> FaultDomain { get; private set; } = null!;

        /// <summary>
        /// FQDN gateway lan interface cidr.
        /// </summary>
        [Output("fqdnLanCidr")]
        public Output<string?> FqdnLanCidr { get; private set; } = null!;

        /// <summary>
        /// FQDN gateway lan interface id.
        /// </summary>
        [Output("fqdnLanInterface")]
        public Output<string> FqdnLanInterface { get; private set; } = null!;

        /// <summary>
        /// LAN VPC ID. Only used for GCP FQDN Gateway.
        /// </summary>
        [Output("fqdnLanVpcId")]
        public Output<string?> FqdnLanVpcId { get; private set; } = null!;

        /// <summary>
        /// Aviatrix gateway unique name.
        /// </summary>
        [Output("gwName")]
        public Output<string> GwName { get; private set; } = null!;

        /// <summary>
        /// Size of Gateway Instance.
        /// </summary>
        [Output("gwSize")]
        public Output<string> GwSize { get; private set; } = null!;

        /// <summary>
        /// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
        /// </summary>
        [Output("idleTimeout")]
        public Output<int?> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Output("imageVersion")]
        public Output<string> ImageVersion { get; private set; } = null!;

        /// <summary>
        /// Enable Insane Mode for Gateway. Valid values: true, false.
        /// </summary>
        [Output("insaneMode")]
        public Output<bool?> InsaneMode { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
        /// </summary>
        [Output("insaneModeAz")]
        public Output<string?> InsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Output("ldapBaseDn")]
        public Output<string?> LdapBaseDn { get; private set; } = null!;

        /// <summary>
        /// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Output("ldapBindDn")]
        public Output<string?> LdapBindDn { get; private set; } = null!;

        /// <summary>
        /// LDAP password. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Output("ldapPassword")]
        public Output<string?> LdapPassword { get; private set; } = null!;

        /// <summary>
        /// LDAP server address. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Output("ldapServer")]
        public Output<string?> LdapServer { get; private set; } = null!;

        /// <summary>
        /// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Output("ldapUsernameAttribute")]
        public Output<string?> LdapUsernameAttribute { get; private set; } = null!;

        /// <summary>
        /// Maximum connection of VPN access.
        /// </summary>
        [Output("maxVpnConn")]
        public Output<string?> MaxVpnConn { get; private set; } = null!;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        [Output("monitorExcludeLists")]
        public Output<ImmutableArray<string>> MonitorExcludeLists { get; private set; } = null!;

        /// <summary>
        /// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
        /// </summary>
        [Output("nameServers")]
        public Output<string?> NameServers { get; private set; } = null!;

        /// <summary>
        /// Token for Okta auth mode.
        /// </summary>
        [Output("oktaToken")]
        public Output<string?> OktaToken { get; private set; } = null!;

        /// <summary>
        /// URL for Okta auth mode.
        /// </summary>
        [Output("oktaUrl")]
        public Output<string?> OktaUrl { get; private set; } = null!;

        /// <summary>
        /// Username suffix for Okta auth mode.
        /// </summary>
        [Output("oktaUsernameSuffix")]
        public Output<string?> OktaUsernameSuffix { get; private set; } = null!;

        /// <summary>
        /// Two step authentication mode.
        /// </summary>
        [Output("otpMode")]
        public Output<string?> OtpMode { get; private set; } = null!;

        /// <summary>
        /// Peering HA availability domain for OCI.
        /// </summary>
        [Output("peeringHaAvailabilityDomain")]
        public Output<string> PeeringHaAvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
        /// </summary>
        [Output("peeringHaAzureEipNameResourceGroup")]
        public Output<string> PeeringHaAzureEipNameResourceGroup { get; private set; } = null!;

        /// <summary>
        /// Instance ID of the peering HA gateway.
        /// </summary>
        [Output("peeringHaCloudInstanceId")]
        public Output<string> PeeringHaCloudInstanceId { get; private set; } = null!;

        /// <summary>
        /// Public IP address that you want assigned to the HA peering instance.
        /// </summary>
        [Output("peeringHaEip")]
        public Output<string> PeeringHaEip { get; private set; } = null!;

        /// <summary>
        /// Peering HA fault domain for OCI.
        /// </summary>
        [Output("peeringHaFaultDomain")]
        public Output<string> PeeringHaFaultDomain { get; private set; } = null!;

        /// <summary>
        /// Aviatrix gateway unique name of HA gateway.
        /// </summary>
        [Output("peeringHaGwName")]
        public Output<string> PeeringHaGwName { get; private set; } = null!;

        /// <summary>
        /// Peering HA Gateway Size.
        /// </summary>
        [Output("peeringHaGwSize")]
        public Output<string?> PeeringHaGwSize { get; private set; } = null!;

        /// <summary>
        /// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
        /// update the gateway to the specified version.
        /// </summary>
        [Output("peeringHaImageVersion")]
        public Output<string> PeeringHaImageVersion { get; private set; } = null!;

        /// <summary>
        /// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
        /// </summary>
        [Output("peeringHaInsaneModeAz")]
        public Output<string?> PeeringHaInsaneModeAz { get; private set; } = null!;

        /// <summary>
        /// Private IP address of HA gateway.
        /// </summary>
        [Output("peeringHaPrivateIp")]
        public Output<string> PeeringHaPrivateIp { get; private set; } = null!;

        /// <summary>
        /// Peering HA security group used for the gateway.
        /// </summary>
        [Output("peeringHaSecurityGroupId")]
        public Output<string> PeeringHaSecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
        /// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
        /// through the aviatrix_controller_config resource.
        /// </summary>
        [Output("peeringHaSoftwareVersion")]
        public Output<string> PeeringHaSoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
        /// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
        /// </summary>
        [Output("peeringHaSubnet")]
        public Output<string?> PeeringHaSubnet { get; private set; } = null!;

        /// <summary>
        /// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
        /// Optional for cloud_type = 8 (Azure).
        /// </summary>
        [Output("peeringHaZone")]
        public Output<string?> PeeringHaZone { get; private set; } = null!;

        /// <summary>
        /// Private IP address of the Gateway created.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// NS server used by the gateway.
        /// </summary>
        [Output("publicDnsServer")]
        public Output<string> PublicDnsServer { get; private set; } = null!;

        /// <summary>
        /// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
        /// values: true or false. Default value: true.
        /// </summary>
        [Output("publicSubnetFilteringGuardDutyEnforced")]
        public Output<bool?> PublicSubnetFilteringGuardDutyEnforced { get; private set; } = null!;

        /// <summary>
        /// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
        /// enable_public_subnet_filtering and peering_ha_subnet are set.
        /// </summary>
        [Output("publicSubnetFilteringHaRouteTables")]
        public Output<ImmutableArray<string>> PublicSubnetFilteringHaRouteTables { get; private set; } = null!;

        /// <summary>
        /// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
        /// true.
        /// </summary>
        [Output("publicSubnetFilteringRouteTables")]
        public Output<ImmutableArray<string>> PublicSubnetFilteringRouteTables { get; private set; } = null!;

        /// <summary>
        /// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
        /// </summary>
        [Output("renegotiationInterval")]
        public Output<int?> RenegotiationInterval { get; private set; } = null!;

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Output("rxQueueSize")]
        public Output<string?> RxQueueSize { get; private set; } = null!;

        /// <summary>
        /// This field indicates whether to enable SAML or not.
        /// </summary>
        [Output("samlEnabled")]
        public Output<bool?> SamlEnabled { get; private set; } = null!;

        /// <summary>
        /// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
        /// Mode is enabled.
        /// </summary>
        [Output("searchDomains")]
        public Output<string?> SearchDomains { get; private set; } = null!;

        /// <summary>
        /// Security group used for the gateway.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// Set to true if this feature is desired.
        /// </summary>
        [Output("singleAzHa")]
        public Output<bool?> SingleAzHa { get; private set; } = null!;

        /// <summary>
        /// Enable Source NAT for this container.
        /// </summary>
        [Output("singleIpSnat")]
        public Output<bool?> SingleIpSnat { get; private set; } = null!;

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Output("softwareVersion")]
        public Output<string> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// Specify split tunnel mode.
        /// </summary>
        [Output("splitTunnel")]
        public Output<bool?> SplitTunnel { get; private set; } = null!;

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// A VPC Network address range selected from one of the available network ranges.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Output("tagLists")]
        public Output<ImmutableArray<string>> TagLists { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the gateway.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The IPSec tunnel down detection time for the Gateway.
        /// </summary>
        [Output("tunnelDetectionTime")]
        public Output<int> TunnelDetectionTime { get; private set; } = null!;

        /// <summary>
        /// ID of legacy VPC/Vnet to be connected.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Region where this gateway will be launched.
        /// </summary>
        [Output("vpcReg")]
        public Output<string> VpcReg { get; private set; } = null!;

        /// <summary>
        /// Enable user access through VPN to this container.
        /// </summary>
        [Output("vpnAccess")]
        public Output<bool?> VpnAccess { get; private set; } = null!;

        /// <summary>
        /// VPN CIDR block for the container.
        /// </summary>
        [Output("vpnCidr")]
        public Output<string?> VpnCidr { get; private set; } = null!;

        /// <summary>
        /// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
        /// 'TCP'' will be used.
        /// </summary>
        [Output("vpnProtocol")]
        public Output<string> VpnProtocol { get; private set; } = null!;

        /// <summary>
        /// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs args, CustomResourceOptions? options = null)
            : base("aviatrix:index/gateway:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
            : base("aviatrix:index/gateway:Gateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, state, options);
        }
    }

    public sealed class GatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account name. This account will be used to launch Aviatrix gateway.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
        /// </summary>
        [Input("additionalCidrs")]
        public Input<string>? AdditionalCidrs { get; set; }

        /// <summary>
        /// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
        /// </summary>
        [Input("additionalCidrsDesignatedGateway")]
        public Input<string>? AdditionalCidrsDesignatedGateway { get; set; }

        /// <summary>
        /// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
        /// use it for this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Input("cloudType", required: true)]
        public Input<int> CloudType { get; set; } = null!;

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// API hostname for DUO auth mode.
        /// </summary>
        [Input("duoApiHostname")]
        public Input<string>? DuoApiHostname { get; set; }

        /// <summary>
        /// Integration key for DUO auth mode.
        /// </summary>
        [Input("duoIntegrationKey")]
        public Input<string>? DuoIntegrationKey { get; set; }

        /// <summary>
        /// Push mode for DUO auth.
        /// </summary>
        [Input("duoPushMode")]
        public Input<string>? DuoPushMode { get; set; }

        /// <summary>
        /// Secret key for DUO auth mode.
        /// </summary>
        [Input("duoSecretKey")]
        public Input<string>? DuoSecretKey { get; set; }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// A name for the ELB that is created.
        /// </summary>
        [Input("elbName")]
        public Input<string>? ElbName { get; set; }

        /// <summary>
        /// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableDesignatedGateway")]
        public Input<bool>? EnableDesignatedGateway { get; set; }

        /// <summary>
        /// Specify whether to enable ELB or not.
        /// </summary>
        [Input("enableElb")]
        public Input<bool>? EnableElb { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
        /// </summary>
        [Input("enableLdap")]
        public Input<bool>? EnableLdap { get; set; }

        /// <summary>
        /// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
        /// </summary>
        [Input("enablePublicSubnetFiltering")]
        public Input<bool>? EnablePublicSubnetFiltering { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
        /// Default value: true.
        /// </summary>
        [Input("enableVpnNat")]
        public Input<bool>? EnableVpnNat { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// FQDN gateway lan interface cidr.
        /// </summary>
        [Input("fqdnLanCidr")]
        public Input<string>? FqdnLanCidr { get; set; }

        /// <summary>
        /// LAN VPC ID. Only used for GCP FQDN Gateway.
        /// </summary>
        [Input("fqdnLanVpcId")]
        public Input<string>? FqdnLanVpcId { get; set; }

        /// <summary>
        /// Aviatrix gateway unique name.
        /// </summary>
        [Input("gwName", required: true)]
        public Input<string> GwName { get; set; } = null!;

        /// <summary>
        /// Size of Gateway Instance.
        /// </summary>
        [Input("gwSize", required: true)]
        public Input<string> GwSize { get; set; } = null!;

        /// <summary>
        /// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// Enable Insane Mode for Gateway. Valid values: true, false.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapBaseDn")]
        public Input<string>? LdapBaseDn { get; set; }

        /// <summary>
        /// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapBindDn")]
        public Input<string>? LdapBindDn { get; set; }

        /// <summary>
        /// LDAP password. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapPassword")]
        public Input<string>? LdapPassword { get; set; }

        /// <summary>
        /// LDAP server address. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapServer")]
        public Input<string>? LdapServer { get; set; }

        /// <summary>
        /// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapUsernameAttribute")]
        public Input<string>? LdapUsernameAttribute { get; set; }

        /// <summary>
        /// Maximum connection of VPN access.
        /// </summary>
        [Input("maxVpnConn")]
        public Input<string>? MaxVpnConn { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
        /// </summary>
        [Input("nameServers")]
        public Input<string>? NameServers { get; set; }

        /// <summary>
        /// Token for Okta auth mode.
        /// </summary>
        [Input("oktaToken")]
        public Input<string>? OktaToken { get; set; }

        /// <summary>
        /// URL for Okta auth mode.
        /// </summary>
        [Input("oktaUrl")]
        public Input<string>? OktaUrl { get; set; }

        /// <summary>
        /// Username suffix for Okta auth mode.
        /// </summary>
        [Input("oktaUsernameSuffix")]
        public Input<string>? OktaUsernameSuffix { get; set; }

        /// <summary>
        /// Two step authentication mode.
        /// </summary>
        [Input("otpMode")]
        public Input<string>? OtpMode { get; set; }

        /// <summary>
        /// Peering HA availability domain for OCI.
        /// </summary>
        [Input("peeringHaAvailabilityDomain")]
        public Input<string>? PeeringHaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
        /// </summary>
        [Input("peeringHaAzureEipNameResourceGroup")]
        public Input<string>? PeeringHaAzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Public IP address that you want assigned to the HA peering instance.
        /// </summary>
        [Input("peeringHaEip")]
        public Input<string>? PeeringHaEip { get; set; }

        /// <summary>
        /// Peering HA fault domain for OCI.
        /// </summary>
        [Input("peeringHaFaultDomain")]
        public Input<string>? PeeringHaFaultDomain { get; set; }

        /// <summary>
        /// Peering HA Gateway Size.
        /// </summary>
        [Input("peeringHaGwSize")]
        public Input<string>? PeeringHaGwSize { get; set; }

        /// <summary>
        /// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
        /// update the gateway to the specified version.
        /// </summary>
        [Input("peeringHaImageVersion")]
        public Input<string>? PeeringHaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
        /// </summary>
        [Input("peeringHaInsaneModeAz")]
        public Input<string>? PeeringHaInsaneModeAz { get; set; }

        /// <summary>
        /// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
        /// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
        /// through the aviatrix_controller_config resource.
        /// </summary>
        [Input("peeringHaSoftwareVersion")]
        public Input<string>? PeeringHaSoftwareVersion { get; set; }

        /// <summary>
        /// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
        /// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
        /// </summary>
        [Input("peeringHaSubnet")]
        public Input<string>? PeeringHaSubnet { get; set; }

        /// <summary>
        /// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
        /// Optional for cloud_type = 8 (Azure).
        /// </summary>
        [Input("peeringHaZone")]
        public Input<string>? PeeringHaZone { get; set; }

        /// <summary>
        /// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
        /// values: true or false. Default value: true.
        /// </summary>
        [Input("publicSubnetFilteringGuardDutyEnforced")]
        public Input<bool>? PublicSubnetFilteringGuardDutyEnforced { get; set; }

        [Input("publicSubnetFilteringHaRouteTables")]
        private InputList<string>? _publicSubnetFilteringHaRouteTables;

        /// <summary>
        /// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
        /// enable_public_subnet_filtering and peering_ha_subnet are set.
        /// </summary>
        public InputList<string> PublicSubnetFilteringHaRouteTables
        {
            get => _publicSubnetFilteringHaRouteTables ?? (_publicSubnetFilteringHaRouteTables = new InputList<string>());
            set => _publicSubnetFilteringHaRouteTables = value;
        }

        [Input("publicSubnetFilteringRouteTables")]
        private InputList<string>? _publicSubnetFilteringRouteTables;

        /// <summary>
        /// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
        /// true.
        /// </summary>
        public InputList<string> PublicSubnetFilteringRouteTables
        {
            get => _publicSubnetFilteringRouteTables ?? (_publicSubnetFilteringRouteTables = new InputList<string>());
            set => _publicSubnetFilteringRouteTables = value;
        }

        /// <summary>
        /// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
        /// </summary>
        [Input("renegotiationInterval")]
        public Input<int>? RenegotiationInterval { get; set; }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// This field indicates whether to enable SAML or not.
        /// </summary>
        [Input("samlEnabled")]
        public Input<bool>? SamlEnabled { get; set; }

        /// <summary>
        /// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
        /// Mode is enabled.
        /// </summary>
        [Input("searchDomains")]
        public Input<string>? SearchDomains { get; set; }

        /// <summary>
        /// Set to true if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Enable Source NAT for this container.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Specify split tunnel mode.
        /// </summary>
        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// A VPC Network address range selected from one of the available network ranges.
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The IPSec tunnel down detection time for the Gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// ID of legacy VPC/Vnet to be connected.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Region where this gateway will be launched.
        /// </summary>
        [Input("vpcReg", required: true)]
        public Input<string> VpcReg { get; set; } = null!;

        /// <summary>
        /// Enable user access through VPN to this container.
        /// </summary>
        [Input("vpnAccess")]
        public Input<bool>? VpnAccess { get; set; }

        /// <summary>
        /// VPN CIDR block for the container.
        /// </summary>
        [Input("vpnCidr")]
        public Input<string>? VpnCidr { get; set; }

        /// <summary>
        /// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
        /// 'TCP'' will be used.
        /// </summary>
        [Input("vpnProtocol")]
        public Input<string>? VpnProtocol { get; set; }

        /// <summary>
        /// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GatewayArgs()
        {
        }
    }

    public sealed class GatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account name. This account will be used to launch Aviatrix gateway.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.
        /// </summary>
        [Input("additionalCidrs")]
        public Input<string>? AdditionalCidrs { get; set; }

        /// <summary>
        /// A list of CIDR ranges separated by comma to configure when 'designated_gateway' feature is enabled.
        /// </summary>
        [Input("additionalCidrsDesignatedGateway")]
        public Input<string>? AdditionalCidrsDesignatedGateway { get; set; }

        /// <summary>
        /// When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and
        /// use it for this gateway.
        /// </summary>
        [Input("allocateNewEip")]
        public Input<bool>? AllocateNewEip { get; set; }

        /// <summary>
        /// Availability domain for OCI.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to this Gateway.
        /// </summary>
        [Input("azureEipNameResourceGroup")]
        public Input<string>? AzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Instance ID of the gateway.
        /// </summary>
        [Input("cloudInstanceId")]
        public Input<string>? CloudInstanceId { get; set; }

        /// <summary>
        /// Type of cloud service provider.
        /// </summary>
        [Input("cloudType")]
        public Input<int>? CloudType { get; set; }

        /// <summary>
        /// Customer managed key ID.
        /// </summary>
        [Input("customerManagedKeys")]
        public Input<string>? CustomerManagedKeys { get; set; }

        /// <summary>
        /// API hostname for DUO auth mode.
        /// </summary>
        [Input("duoApiHostname")]
        public Input<string>? DuoApiHostname { get; set; }

        /// <summary>
        /// Integration key for DUO auth mode.
        /// </summary>
        [Input("duoIntegrationKey")]
        public Input<string>? DuoIntegrationKey { get; set; }

        /// <summary>
        /// Push mode for DUO auth.
        /// </summary>
        [Input("duoPushMode")]
        public Input<string>? DuoPushMode { get; set; }

        /// <summary>
        /// Secret key for DUO auth mode.
        /// </summary>
        [Input("duoSecretKey")]
        public Input<string>? DuoSecretKey { get; set; }

        /// <summary>
        /// Required when allocate_new_eip is false. It uses specified EIP for this gateway.
        /// </summary>
        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// ELB DNS Name.
        /// </summary>
        [Input("elbDnsName")]
        public Input<string>? ElbDnsName { get; set; }

        /// <summary>
        /// A name for the ELB that is created.
        /// </summary>
        [Input("elbName")]
        public Input<string>? ElbName { get; set; }

        /// <summary>
        /// Enable 'designated_gateway' feature for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableDesignatedGateway")]
        public Input<bool>? EnableDesignatedGateway { get; set; }

        /// <summary>
        /// Specify whether to enable ELB or not.
        /// </summary>
        [Input("enableElb")]
        public Input<bool>? EnableElb { get; set; }

        /// <summary>
        /// Enable encrypt gateway EBS volume. Only supported for AWS provider. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableEncryptVolume")]
        public Input<bool>? EnableEncryptVolume { get; set; }

        /// <summary>
        /// Enable jumbo frame support for Gateway. Valid values: true or false. Default value: true.
        /// </summary>
        [Input("enableJumboFrame")]
        public Input<bool>? EnableJumboFrame { get; set; }

        /// <summary>
        /// Specify whether to enable LDAP or not. Supported values: 'yes' and 'no'.
        /// </summary>
        [Input("enableLdap")]
        public Input<bool>? EnableLdap { get; set; }

        /// <summary>
        /// Enable monitor gateway subnets. Valid values: true, false. Default value: false.
        /// </summary>
        [Input("enableMonitorGatewaySubnets")]
        public Input<bool>? EnableMonitorGatewaySubnets { get; set; }

        /// <summary>
        /// Create a [Public Subnet Filtering gateway](https://docs.aviatrix.com/HowTos/public_subnet_filtering_faq.html).
        /// </summary>
        [Input("enablePublicSubnetFiltering")]
        public Input<bool>? EnablePublicSubnetFiltering { get; set; }

        /// <summary>
        /// Enable spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("enableSpotInstance")]
        public Input<bool>? EnableSpotInstance { get; set; }

        /// <summary>
        /// Enable vpc_dns_server for Gateway. Valid values: true, false.
        /// </summary>
        [Input("enableVpcDnsServer")]
        public Input<bool>? EnableVpcDnsServer { get; set; }

        /// <summary>
        /// This field indicates whether to enable VPN NAT or not. Only supported for VPN gateway. Valid values: true, false.
        /// Default value: true.
        /// </summary>
        [Input("enableVpnNat")]
        public Input<bool>? EnableVpnNat { get; set; }

        /// <summary>
        /// Fault domain for OCI.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        /// <summary>
        /// FQDN gateway lan interface cidr.
        /// </summary>
        [Input("fqdnLanCidr")]
        public Input<string>? FqdnLanCidr { get; set; }

        /// <summary>
        /// FQDN gateway lan interface id.
        /// </summary>
        [Input("fqdnLanInterface")]
        public Input<string>? FqdnLanInterface { get; set; }

        /// <summary>
        /// LAN VPC ID. Only used for GCP FQDN Gateway.
        /// </summary>
        [Input("fqdnLanVpcId")]
        public Input<string>? FqdnLanVpcId { get; set; }

        /// <summary>
        /// Aviatrix gateway unique name.
        /// </summary>
        [Input("gwName")]
        public Input<string>? GwName { get; set; }

        /// <summary>
        /// Size of Gateway Instance.
        /// </summary>
        [Input("gwSize")]
        public Input<string>? GwSize { get; set; }

        /// <summary>
        /// Typed value when modifying idle_timeout. If it's -1, this feature is disabled.
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// image_version can be used to set the desired image version of the gateway. If set, we will attempt to update the gateway
        /// to the specified version.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// Enable Insane Mode for Gateway. Valid values: true, false.
        /// </summary>
        [Input("insaneMode")]
        public Input<bool>? InsaneMode { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Gateway. Required if insane_mode is set.
        /// </summary>
        [Input("insaneModeAz")]
        public Input<string>? InsaneModeAz { get; set; }

        /// <summary>
        /// LDAP base DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapBaseDn")]
        public Input<string>? LdapBaseDn { get; set; }

        /// <summary>
        /// LDAP bind DN. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapBindDn")]
        public Input<string>? LdapBindDn { get; set; }

        /// <summary>
        /// LDAP password. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapPassword")]
        public Input<string>? LdapPassword { get; set; }

        /// <summary>
        /// LDAP server address. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapServer")]
        public Input<string>? LdapServer { get; set; }

        /// <summary>
        /// LDAP user attribute. Required: Yes if enable_ldap is 'yes'.
        /// </summary>
        [Input("ldapUsernameAttribute")]
        public Input<string>? LdapUsernameAttribute { get; set; }

        /// <summary>
        /// Maximum connection of VPN access.
        /// </summary>
        [Input("maxVpnConn")]
        public Input<string>? MaxVpnConn { get; set; }

        [Input("monitorExcludeLists")]
        private InputList<string>? _monitorExcludeLists;

        /// <summary>
        /// A set of monitored instance ids. Only valid when 'enable_monitor_gateway_subnets' = true.
        /// </summary>
        public InputList<string> MonitorExcludeLists
        {
            get => _monitorExcludeLists ?? (_monitorExcludeLists = new InputList<string>());
            set => _monitorExcludeLists = value;
        }

        /// <summary>
        /// A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.
        /// </summary>
        [Input("nameServers")]
        public Input<string>? NameServers { get; set; }

        /// <summary>
        /// Token for Okta auth mode.
        /// </summary>
        [Input("oktaToken")]
        public Input<string>? OktaToken { get; set; }

        /// <summary>
        /// URL for Okta auth mode.
        /// </summary>
        [Input("oktaUrl")]
        public Input<string>? OktaUrl { get; set; }

        /// <summary>
        /// Username suffix for Okta auth mode.
        /// </summary>
        [Input("oktaUsernameSuffix")]
        public Input<string>? OktaUsernameSuffix { get; set; }

        /// <summary>
        /// Two step authentication mode.
        /// </summary>
        [Input("otpMode")]
        public Input<string>? OtpMode { get; set; }

        /// <summary>
        /// Peering HA availability domain for OCI.
        /// </summary>
        [Input("peeringHaAvailabilityDomain")]
        public Input<string>? PeeringHaAvailabilityDomain { get; set; }

        /// <summary>
        /// The name of the public IP address and its resource group in Azure to assign to the Peering HA Gateway.
        /// </summary>
        [Input("peeringHaAzureEipNameResourceGroup")]
        public Input<string>? PeeringHaAzureEipNameResourceGroup { get; set; }

        /// <summary>
        /// Instance ID of the peering HA gateway.
        /// </summary>
        [Input("peeringHaCloudInstanceId")]
        public Input<string>? PeeringHaCloudInstanceId { get; set; }

        /// <summary>
        /// Public IP address that you want assigned to the HA peering instance.
        /// </summary>
        [Input("peeringHaEip")]
        public Input<string>? PeeringHaEip { get; set; }

        /// <summary>
        /// Peering HA fault domain for OCI.
        /// </summary>
        [Input("peeringHaFaultDomain")]
        public Input<string>? PeeringHaFaultDomain { get; set; }

        /// <summary>
        /// Aviatrix gateway unique name of HA gateway.
        /// </summary>
        [Input("peeringHaGwName")]
        public Input<string>? PeeringHaGwName { get; set; }

        /// <summary>
        /// Peering HA Gateway Size.
        /// </summary>
        [Input("peeringHaGwSize")]
        public Input<string>? PeeringHaGwSize { get; set; }

        /// <summary>
        /// peering_ha_image_version can be used to set the desired image version of the HA gateway. If set, we will attempt to
        /// update the gateway to the specified version.
        /// </summary>
        [Input("peeringHaImageVersion")]
        public Input<string>? PeeringHaImageVersion { get; set; }

        /// <summary>
        /// AZ of subnet being created for Insane Mode Peering HA Gateway. Required if insane_mode is set.
        /// </summary>
        [Input("peeringHaInsaneModeAz")]
        public Input<string>? PeeringHaInsaneModeAz { get; set; }

        /// <summary>
        /// Private IP address of HA gateway.
        /// </summary>
        [Input("peeringHaPrivateIp")]
        public Input<string>? PeeringHaPrivateIp { get; set; }

        /// <summary>
        /// Peering HA security group used for the gateway.
        /// </summary>
        [Input("peeringHaSecurityGroupId")]
        public Input<string>? PeeringHaSecurityGroupId { get; set; }

        /// <summary>
        /// peering_ha_software_version can be used to set the desired software version of the HA gateway. If set, we will attempt
        /// to update the gateway to the specified version. If left blank, the gateway software version will continue to be managed
        /// through the aviatrix_controller_config resource.
        /// </summary>
        [Input("peeringHaSoftwareVersion")]
        public Input<string>? PeeringHaSoftwareVersion { get; set; }

        /// <summary>
        /// Public Subnet Information while creating Peering HA Gateway, only subnet is accepted. Required to create peering ha
        /// gateway if cloud_type = 1 or 8 (AWS or Azure). Optional if cloud_type = 4 (GCP)
        /// </summary>
        [Input("peeringHaSubnet")]
        public Input<string>? PeeringHaSubnet { get; set; }

        /// <summary>
        /// Zone information for creating Peering HA Gateway. Required to create peering ha gateway if cloud_type = 4 (GCP).
        /// Optional for cloud_type = 8 (Azure).
        /// </summary>
        [Input("peeringHaZone")]
        public Input<string>? PeeringHaZone { get; set; }

        /// <summary>
        /// Private IP address of the Gateway created.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// NS server used by the gateway.
        /// </summary>
        [Input("publicDnsServer")]
        public Input<string>? PublicDnsServer { get; set; }

        /// <summary>
        /// Whether to enforce Guard Duty IP blocking. Required when `enable_public_subnet_filtering` attribute is true. Valid
        /// values: true or false. Default value: true.
        /// </summary>
        [Input("publicSubnetFilteringGuardDutyEnforced")]
        public Input<bool>? PublicSubnetFilteringGuardDutyEnforced { get; set; }

        [Input("publicSubnetFilteringHaRouteTables")]
        private InputList<string>? _publicSubnetFilteringHaRouteTables;

        /// <summary>
        /// Route tables whose associated public subnets are protected for the HA PSF gateway. Required when
        /// enable_public_subnet_filtering and peering_ha_subnet are set.
        /// </summary>
        public InputList<string> PublicSubnetFilteringHaRouteTables
        {
            get => _publicSubnetFilteringHaRouteTables ?? (_publicSubnetFilteringHaRouteTables = new InputList<string>());
            set => _publicSubnetFilteringHaRouteTables = value;
        }

        [Input("publicSubnetFilteringRouteTables")]
        private InputList<string>? _publicSubnetFilteringRouteTables;

        /// <summary>
        /// Route tables whose associated public subnets are protected. Required when `enable_public_subnet_filtering` attribute is
        /// true.
        /// </summary>
        public InputList<string> PublicSubnetFilteringRouteTables
        {
            get => _publicSubnetFilteringRouteTables ?? (_publicSubnetFilteringRouteTables = new InputList<string>());
            set => _publicSubnetFilteringRouteTables = value;
        }

        /// <summary>
        /// Typed value when modifying renegotiation_interval. If it's -1, this feature is disabled.
        /// </summary>
        [Input("renegotiationInterval")]
        public Input<int>? RenegotiationInterval { get; set; }

        /// <summary>
        /// Gateway ethernet interface RX queue size. Supported for AWS related clouds only.
        /// </summary>
        [Input("rxQueueSize")]
        public Input<string>? RxQueueSize { get; set; }

        /// <summary>
        /// This field indicates whether to enable SAML or not.
        /// </summary>
        [Input("samlEnabled")]
        public Input<bool>? SamlEnabled { get; set; }

        /// <summary>
        /// A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel
        /// Mode is enabled.
        /// </summary>
        [Input("searchDomains")]
        public Input<string>? SearchDomains { get; set; }

        /// <summary>
        /// Security group used for the gateway.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// Set to true if this feature is desired.
        /// </summary>
        [Input("singleAzHa")]
        public Input<bool>? SingleAzHa { get; set; }

        /// <summary>
        /// Enable Source NAT for this container.
        /// </summary>
        [Input("singleIpSnat")]
        public Input<bool>? SingleIpSnat { get; set; }

        /// <summary>
        /// software_version can be used to set the desired software version of the gateway. If set, we will attempt to update the
        /// gateway to the specified version. If left blank, the gateway software version will continue to be managed through the
        /// aviatrix_controller_config resource.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// Specify split tunnel mode.
        /// </summary>
        [Input("splitTunnel")]
        public Input<bool>? SplitTunnel { get; set; }

        /// <summary>
        /// Price for spot instance. NOT supported for production deployment.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// A VPC Network address range selected from one of the available network ranges.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("tagLists")]
        private InputList<string>? _tagLists;

        /// <summary>
        /// Instance tag of cloud provider.
        /// </summary>
        [Obsolete(@"Use tags instead.")]
        public InputList<string> TagLists
        {
            get => _tagLists ?? (_tagLists = new InputList<string>());
            set => _tagLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The IPSec tunnel down detection time for the Gateway.
        /// </summary>
        [Input("tunnelDetectionTime")]
        public Input<int>? TunnelDetectionTime { get; set; }

        /// <summary>
        /// ID of legacy VPC/Vnet to be connected.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Region where this gateway will be launched.
        /// </summary>
        [Input("vpcReg")]
        public Input<string>? VpcReg { get; set; }

        /// <summary>
        /// Enable user access through VPN to this container.
        /// </summary>
        [Input("vpnAccess")]
        public Input<bool>? VpnAccess { get; set; }

        /// <summary>
        /// VPN CIDR block for the container.
        /// </summary>
        [Input("vpnCidr")]
        public Input<string>? VpnCidr { get; set; }

        /// <summary>
        /// Elb protocol for VPN gateway with elb enabled. Only supports AWS provider. Valid values: 'TCP', 'UDP'. If not specified,
        /// 'TCP'' will be used.
        /// </summary>
        [Input("vpnProtocol")]
        public Input<string>? VpnProtocol { get; set; }

        /// <summary>
        /// Availability Zone. Only available for Azure and Public Subnet Filtering gateway
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GatewayState()
        {
        }
    }
}
